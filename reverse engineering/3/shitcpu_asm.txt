;
; Input	MD5   :	5F766BF9FB92AEAD0AE2DE76EA57F21B
; Input	CRC32 :	59BEAD1C

; File Name   :	C:\Users\eric\Downloads\shitcpu_5f766bf9fb92aead0ae2de76ea57f21b
; Format      :	ELF64 for x86-64 (Shared object)
; Interpreter '/lib64/ld-linux-x86-64.so.2'
; Needed Library 'libstdc++.so.6'
; Needed Library 'libgcc_s.so.1'
; Needed Library 'libc.so.6'
;

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_init		segment	dword public 'CODE' use64
		assume cs:_init
		;org 0F80h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _init_proc
_init_proc	proc near		; CODE XREF: sub_3670+2Ep
		sub	rsp, 8
		mov	rax, cs:__gmon_start___ptr
		test	rax, rax
		jz	short loc_F95
		call	___gmon_start__

loc_F95:				; CODE XREF: _init_proc+Ej
		add	rsp, 8
		retn
_init_proc	endp

_init		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_plt		segment	para public 'CODE' use64
		assume cs:_plt
		;org 0FA0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		dq 2 dup(?)
; [00000006 BYTES: COLLAPSED FUNCTION _memset. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___strncpy_chk. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _close. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___gmon_start__. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _puts. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION operator new[](ulong). PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _exit. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___printf_chk. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _strcasecmp. PRESS KEYPAD	CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _setvbuf.	PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _putchar.	PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _read. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _fopen. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS	KEYPAD CTRL-"+"	TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _getpid. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION __IO_getc. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _listen. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___cxa_finalize. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _strtol. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _connect.	PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___strcpy_chk. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _signal. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _socket. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _fread. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _alarm. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___stack_chk_fail. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _srand. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _fclose. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION ___sprintf_chk. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _strcspn.	PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _strsep. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _bind. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _rand. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; ---------------------------------------------------------------------------

___gxx_personality_v0:
		jmp	cs:off_205128
; ---------------------------------------------------------------------------
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _write. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION __Unwind_Resume. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _accept. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy. PRESS KEYPAD CTRL-"+" TO	EXPAND]
		dw ?
		dq ?
; [00000006 BYTES: COLLAPSED FUNCTION _time. PRESS KEYPAD CTRL-"+" TO EXPAND]
		dw ?
		dq ?
_plt		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use64
		assume cs:_text
		;org 1230h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start
start		proc near
		xor	ebp, ebp
		mov	r9, rdx
		pop	rsi
		mov	rdx, rsp
		and	rsp, 0FFFFFFFFFFFFFFF0h
		push	rax
		push	rsp
		lea	r8, nullsub_1
		lea	rcx, sub_3670
		lea	rdi, sub_18BC
		call	___libc_start_main
		hlt
start		endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1260	proc near		; CODE XREF: sub_12D0:loc_12F3p
		lea	rax, unk_205177
		lea	rdi, _edata
		push	rbp
		sub	rax, rdi
		mov	rbp, rsp
		cmp	rax, 0Eh
		ja	short loc_127D

loc_127B:				; CODE XREF: sub_1260+27j
		pop	rbp
		retn
; ---------------------------------------------------------------------------

loc_127D:				; CODE XREF: sub_1260+19j
		mov	rax, cs:_ITM_deregisterTMCloneTable_ptr
		test	rax, rax
		jz	short loc_127B
		pop	rbp
		jmp	rax
sub_1260	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_1310

loc_1290:				; CODE XREF: sub_1310+24j
					; sub_1310:loc_1340j
		lea	rax, _edata
		lea	rdi, _edata
		push	rbp
		sub	rax, rdi
		mov	rbp, rsp
		sar	rax, 3
		mov	rdx, rax
		shr	rdx, 3Fh
		add	rax, rdx
		sar	rax, 1
		jnz	short loc_12BA

loc_12B8:				; CODE XREF: sub_1310-4Cj
		pop	rbp
		retn
; ---------------------------------------------------------------------------

loc_12BA:				; CODE XREF: sub_1310-5Aj
		mov	rdx, cs:_ITM_registerTMCloneTable_ptr
		test	rdx, rdx
		jz	short loc_12B8
		pop	rbp
		mov	rsi, rax
		jmp	rdx
; END OF FUNCTION CHUNK	FOR sub_1310
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_12D0	proc near		; DATA XREF: .fini_array:off_204DC8o
		cmp	cs:_edata, 0
		jnz	short locret_1300
		cmp	cs:__cxa_finalize_ptr, 0
		push	rbp
		mov	rbp, rsp
		jz	short loc_12F3
		mov	rdi, cs:off_205160
		call	___cxa_finalize

loc_12F3:				; CODE XREF: sub_12D0+15j
		call	sub_1260
		pop	rbp
		mov	cs:_edata, 1

locret_1300:				; CODE XREF: sub_12D0+7j
		rep retn
sub_12D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1310	proc near		; DATA XREF: .init_array:off_204DC0o

; FUNCTION CHUNK AT 0000000000001290 SIZE 0000003C BYTES

		cmp	cs:qword_204DD0, 0
		jz	short loc_1340
		mov	rax, cs:_Jv_RegisterClasses_ptr
		test	rax, rax
		jz	short loc_1340
		push	rbp
		lea	rdi, qword_204DD0
		mov	rbp, rsp
		call	rax ; _Jv_RegisterClasses
		pop	rbp
		jmp	loc_1290
; ---------------------------------------------------------------------------
		align 20h

loc_1340:				; CODE XREF: sub_1310+8j sub_1310+14j
		jmp	loc_1290
sub_1310	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void handler(int)
handler		proc near		; DATA XREF: sub_18BC+48o
		sub	rsp, 8
		lea	rdi, aTimeoutConnect ; "Timeout! Connection closing."
		call	_puts
		mov	edi, 1		; status
		call	_exit
handler		endp


; =============== S U B	R O U T	I N E =======================================


sub_135F	proc near		; CODE XREF: sub_18BC+81p

ptr		= dword	ptr -0Ch

		push	rbx
		sub	rsp, 10h
		lea	rsi, modes	; "rb"
		lea	rdi, filename	; "/dev/urandom"
		call	_fopen
		mov	rbx, rax
		test	rax, rax
		jnz	short loc_1395
		mov	edi, 0		; timer
		call	_time
		mov	rbx, rax
		call	_getpid
		xor	eax, ebx
		jmp	short loc_13D4
; ---------------------------------------------------------------------------

loc_1395:				; CODE XREF: sub_135F+1Ej
		lea	rdi, [rsp+18h+ptr] ; ptr
		mov	rcx, rax	; stream
		mov	edx, 1		; n
		mov	esi, 4		; size
		call	_fread
		cmp	rax, 1
		jz	short loc_13C8
		mov	edi, 0		; timer
		call	_time
		mov	rbx, rax
		call	_getpid
		xor	eax, ebx
		jmp	short loc_13D4
; ---------------------------------------------------------------------------

loc_13C8:				; CODE XREF: sub_135F+51j
		mov	rdi, rbx	; stream
		call	_fclose
		mov	eax, [rsp+18h+ptr]

loc_13D4:				; CODE XREF: sub_135F+34j sub_135F+67j
		add	rsp, 10h
		pop	rbx
		retn
sub_135F	endp


; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_13DA(void *ptr)
sub_13DA	proc near		; CODE XREF: sub_1435+Ep sub_1451+Ep
		test	esi, esi
		jz	short locret_1433
		push	r12
		push	rbp
		push	rbx
		mov	rbx, rdi
		sub	esi, 1
		lea	r12, [rdi+rsi+1]
		mov	rbp, cs:stdin_ptr

loc_13F4:				; CODE XREF: sub_13DA+53j
		mov	rcx, [rbp+0]	; stream
		mov	edx, 1		; n
		mov	esi, 1		; size
		mov	rdi, rbx	; ptr
		call	_fread
		cmp	rax, 1
		jz	short loc_1426
		lea	rdi, s		; "Recv	error."
		call	_puts
		mov	edi, 0FFFFFFFFh	; status
		call	_exit
; ---------------------------------------------------------------------------

loc_1426:				; CODE XREF: sub_13DA+34j
		add	rbx, 1
		cmp	rbx, r12
		jnz	short loc_13F4
		pop	rbx
		pop	rbp
		pop	r12

locret_1433:				; CODE XREF: sub_13DA+2j
		rep retn
sub_13DA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1435	proc near

ptr		= dword	ptr -0Ch

		sub	rsp, 18h
		lea	rdi, [rsp+18h+ptr] ; ptr
		mov	esi, 4
		call	sub_13DA
		mov	eax, [rsp+18h+ptr]
		add	rsp, 18h
		retn
sub_1435	endp


; =============== S U B	R O U T	I N E =======================================


sub_1451	proc near

ptr		= byte ptr -9

		sub	rsp, 18h
		lea	rdi, [rsp+18h+ptr] ; ptr
		mov	esi, 1
		call	sub_13DA
		movzx	eax, [rsp+18h+ptr]
		add	rsp, 18h
		retn
sub_1451	endp


; =============== S U B	R O U T	I N E =======================================


sub_146E	proc near		; CODE XREF: sub_18BC+1EDp

stringp		= qword	ptr -60h
var_58		= qword	ptr -58h
nptr		= qword	ptr -50h
var_48		= qword	ptr -48h

		push	r15
		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 38h
		mov	r13, rsi
		mov	[rsp+68h+stringp], rdi
		mov	ebx, 0
		lea	r12, [rsp+68h+stringp]

loc_148E:				; CODE XREF: sub_146E+46j
		mov	ebp, ebx
		lea	rsi, delim	; " \t"
		mov	rdi, r12	; stringp
		call	_strsep
		test	rax, rax
		jz	short loc_14B6
		lea	ebp, [rbx+1]
		mov	[rsp+rbx*8+68h+var_58],	rax
		add	rbx, 1
		cmp	rbx, 4
		jnz	short loc_148E

loc_14B6:				; CODE XREF: sub_146E+34j
		cmp	ebp, 3
		jz	short loc_14CC
		lea	rdi, aUsageRbAddress ; "Usage: rb <address> <count>"
		call	_puts
		jmp	loc_15C2
; ---------------------------------------------------------------------------

loc_14CC:				; CODE XREF: sub_146E+4Bj
		mov	edx, 10h	; base
		mov	esi, 0		; endptr
		mov	rdi, [rsp+68h+nptr] ; nptr
		call	_strtol
		mov	rbp, rax
		mov	rbx, [rsp+68h+var_48]
		mov	edx, 0Ah	; base
		mov	esi, 0		; endptr
		mov	rdi, rbx	; nptr
		call	_strtol
		cmp	eax, 27h
		jle	short loc_1510
		lea	rdi, aMaxOf40BytesTo ; "Max of 40 bytes	to read."
		call	_puts
		jmp	loc_15C2
; ---------------------------------------------------------------------------

loc_1510:				; CODE XREF: sub_146E+8Fj
		mov	r12d, ebp
		mov	edx, 0Ah	; base
		mov	esi, 0		; endptr
		mov	rdi, rbx	; nptr
		call	_strtol
		movzx	ebx, al
		movzx	ecx, bp
		mov	edx, ebx
		lea	rsi, aReadingDBytesA ; "Reading	%d bytes at address 0x%04X:\n"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		mov	r14d, ebx
		test	ebx, ebx
		jz	short loc_159F
		mov	ebx, 0
		lea	r15, a04x	; "%04X: "

loc_1556:				; CODE XREF: sub_146E+12Fj
		lea	ebp, [r12+rbx]
		test	bl, 3
		jnz	short loc_156F
		test	ebx, ebx
		jz	short loc_15AB
		mov	edi, 0Ah	; c
		call	_putchar
		jmp	short loc_15AB
; ---------------------------------------------------------------------------

loc_156F:				; CODE XREF: sub_146E+EFj
					; sub_146E+152j
		movzx	esi, bp
		mov	rdi, [r13+110h]
		call	sub_1C76
		movzx	edx, al
		lea	rsi, a02x	; "%02X	"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		add	ebx, 1
		cmp	ebx, r14d
		jnz	short loc_1556

loc_159F:				; CODE XREF: sub_146E+DAj
		mov	edi, 0Ah	; c
		call	_putchar
		jmp	short loc_15C2
; ---------------------------------------------------------------------------

loc_15AB:				; CODE XREF: sub_146E+F3j sub_146E+FFj
		movzx	edx, bp
		mov	rsi, r15
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		jmp	short loc_156F
; ---------------------------------------------------------------------------

loc_15C2:				; CODE XREF: sub_146E+59j sub_146E+9Dj ...
		add	rsp, 38h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_146E	endp


; =============== S U B	R O U T	I N E =======================================


sub_15D1	proc near		; CODE XREF: sub_18BC+212p

stringp		= qword	ptr -50h
var_48		= qword	ptr -48h
nptr		= qword	ptr -40h
var_38		= qword	ptr -38h

		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 38h
		mov	r13, rsi
		mov	[rsp+58h+stringp], rdi
		mov	ebx, 0
		lea	r12, [rsp+58h+stringp]

loc_15ED:				; CODE XREF: sub_15D1+42j
		mov	ebp, ebx
		lea	rsi, delim	; " \t"
		mov	rdi, r12	; stringp
		call	_strsep
		test	rax, rax
		jz	short loc_1615
		lea	ebp, [rbx+1]
		mov	[rsp+rbx*8+58h+var_48],	rax
		add	rbx, 1
		cmp	rbx, 4
		jnz	short loc_15ED

loc_1615:				; CODE XREF: sub_15D1+30j
		cmp	ebp, 3
		jz	short loc_1628
		lea	rdi, aUsageWbAddress ; "Usage: wb <address> <value>"
		call	_puts
		jmp	short loc_1683
; ---------------------------------------------------------------------------

loc_1628:				; CODE XREF: sub_15D1+47j
		mov	edx, 10h	; base
		mov	esi, 0		; endptr
		mov	rdi, [rsp+58h+nptr] ; nptr
		call	_strtol
		mov	rbp, rax
		mov	edx, 10h	; base
		mov	esi, 0		; endptr
		mov	rdi, [rsp+58h+var_38] ;	nptr
		call	_strtol
		movzx	ebx, al
		movzx	ebp, bp
		mov	rdi, [r13+110h]
		mov	edx, ebx
		mov	esi, ebp
		call	sub_1CB2
		mov	ecx, ebp
		mov	edx, ebx
		lea	rsi, aByte0x02xWritt ; "Byte 0x%02X written to address 0x%04X\n"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk

loc_1683:				; CODE XREF: sub_15D1+55j
		add	rsp, 38h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		retn
sub_15D1	endp


; =============== S U B	R O U T	I N E =======================================


sub_168E	proc near		; CODE XREF: sub_18BC+237p

stringp		= qword	ptr -60h
var_58		= qword	ptr -58h
nptr		= qword	ptr -50h
var_48		= qword	ptr -48h

		push	r15
		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 38h
		mov	r13, rsi
		mov	[rsp+68h+stringp], rdi
		mov	ebx, 0
		lea	r12, [rsp+68h+stringp]

loc_16AE:				; CODE XREF: sub_168E+46j
		mov	ebp, ebx
		lea	rsi, delim	; " \t"
		mov	rdi, r12	; stringp
		call	_strsep
		test	rax, rax
		jz	short loc_16D6
		lea	ebp, [rbx+1]
		mov	[rsp+rbx*8+68h+var_58],	rax
		add	rbx, 1
		cmp	rbx, 4
		jnz	short loc_16AE

loc_16D6:				; CODE XREF: sub_168E+34j
		cmp	ebp, 3
		jz	short loc_16EC
		lea	rdi, aUsageRwAddress ; "Usage: rw <address> <count>"
		call	_puts
		jmp	loc_17E2
; ---------------------------------------------------------------------------

loc_16EC:				; CODE XREF: sub_168E+4Bj
		mov	edx, 10h	; base
		mov	esi, 0		; endptr
		mov	rdi, [rsp+68h+nptr] ; nptr
		call	_strtol
		mov	rbp, rax
		mov	rbx, [rsp+68h+var_48]
		mov	edx, 0Ah	; base
		mov	esi, 0		; endptr
		mov	rdi, rbx	; nptr
		call	_strtol
		cmp	eax, 27h
		jle	short loc_1730
		lea	rdi, aMaxOf40WordsTo ; "Max of 40 words	to read."
		call	_puts
		jmp	loc_17E2
; ---------------------------------------------------------------------------

loc_1730:				; CODE XREF: sub_168E+8Fj
		mov	r12d, ebp
		mov	edx, 0Ah	; base
		mov	esi, 0		; endptr
		mov	rdi, rbx	; nptr
		call	_strtol
		movzx	ebx, al
		movzx	ecx, bp
		mov	edx, ebx
		lea	rsi, aReadingDWordsA ; "Reading	%d words at address 0x%04X:\n"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		mov	r14d, ebx
		test	ebx, ebx
		jz	short loc_17BF
		mov	ebx, 0
		lea	r15, a04x	; "%04X: "

loc_1776:				; CODE XREF: sub_168E+12Fj
		lea	ebp, [r12+rbx*2]
		test	bl, 3
		jnz	short loc_178F
		test	ebx, ebx
		jz	short loc_17CB
		mov	edi, 0Ah	; c
		call	_putchar
		jmp	short loc_17CB
; ---------------------------------------------------------------------------

loc_178F:				; CODE XREF: sub_168E+EFj
					; sub_168E+152j
		movzx	esi, bp
		mov	rdi, [r13+110h]
		call	sub_1C82
		movzx	edx, ax
		lea	rsi, a04x_0	; "%04X	"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		add	ebx, 1
		cmp	ebx, r14d
		jnz	short loc_1776

loc_17BF:				; CODE XREF: sub_168E+DAj
		mov	edi, 0Ah	; c
		call	_putchar
		jmp	short loc_17E2
; ---------------------------------------------------------------------------

loc_17CB:				; CODE XREF: sub_168E+F3j sub_168E+FFj
		movzx	edx, bp
		mov	rsi, r15
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		jmp	short loc_178F
; ---------------------------------------------------------------------------

loc_17E2:				; CODE XREF: sub_168E+59j sub_168E+9Dj ...
		add	rsp, 38h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_168E	endp


; =============== S U B	R O U T	I N E =======================================


sub_17F1	proc near		; CODE XREF: sub_18BC+25Cp

stringp		= qword	ptr -50h
var_48		= qword	ptr -48h
nptr		= qword	ptr -40h
var_38		= qword	ptr -38h

		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 38h
		mov	r13, rsi
		mov	[rsp+58h+stringp], rdi
		mov	ebx, 0
		lea	r12, [rsp+58h+stringp]

loc_180D:				; CODE XREF: sub_17F1+42j
		mov	ebp, ebx
		lea	rsi, delim	; " \t"
		mov	rdi, r12	; stringp
		call	_strsep
		test	rax, rax
		jz	short loc_1835
		lea	ebp, [rbx+1]
		mov	[rsp+rbx*8+58h+var_48],	rax
		add	rbx, 1
		cmp	rbx, 4
		jnz	short loc_180D

loc_1835:				; CODE XREF: sub_17F1+30j
		cmp	ebp, 3
		jz	short loc_1848
		lea	rdi, aUsageWwAddress ; "Usage: ww <address> <value>"
		call	_puts
		jmp	short loc_18B1
; ---------------------------------------------------------------------------

loc_1848:				; CODE XREF: sub_17F1+47j
		mov	edx, 10h	; base
		mov	esi, 0		; endptr
		mov	rdi, [rsp+58h+nptr] ; nptr
		call	_strtol
		mov	edx, eax
		and	dx, 1
		mov	ebp, eax
		and	ebp, 0FFFFFFFEh
		test	dx, dx
		cmovz	ebp, eax
		mov	edx, 10h	; base
		mov	esi, 0		; endptr
		mov	rdi, [rsp+58h+var_38] ;	nptr
		call	_strtol
		movzx	ebx, ax
		movzx	ebp, bp
		mov	rdi, [r13+110h]
		mov	edx, ebx
		mov	esi, ebp
		call	sub_1CBE
		mov	ecx, ebp
		mov	edx, ebx
		lea	rsi, aWord0x04xWritt ; "Word 0x%04X written to address 0x%04X\n"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk

loc_18B1:				; CODE XREF: sub_17F1+55j
		add	rsp, 38h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		retn
sub_17F1	endp


; =============== S U B	R O U T	I N E =======================================


sub_18BC	proc near		; DATA XREF: start+1Do

var_5D0		= qword	ptr -5D0h
var_5C8		= byte ptr -5C8h
var_5B8		= byte ptr -5B8h
var_578		= byte ptr -578h
s		= byte ptr -458h
s1		= byte ptr -248h
var_40		= qword	ptr -40h
arg_8		= byte ptr  10h
arg_18		= byte ptr  20h
arg_58		= byte ptr  60h

		push	r15
		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 5A8h
		mov	rax, fs:28h
		mov	[rsp+5D8h+var_40], rax
		xor	eax, eax
		lea	rbx, [rsp+5D8h+var_578]
		mov	rdi, rbx
		call	sub_1D30
		lea	rdi, [rsp+5D8h+var_5C8]
		mov	rsi, rbx
		call	sub_1C34
		lea	rdi, [rsp+5D8h+var_5B8]
		call	sub_2AF0
		lea	rsi, handler	; handler
		mov	edi, 0Eh	; sig
		call	_signal
		mov	edi, 3Ch	; seconds
		call	_alarm
		mov	ecx, 0		; n
		mov	edx, 2		; modes
		mov	esi, 0		; buf
		mov	rax, cs:stdout_ptr
		mov	rdi, [rax]	; stream
		call	_setvbuf
		call	sub_135F
		mov	edi, eax	; seed
		call	_srand
		lea	rdx, [rsp+5D8h+var_5B8]
		lea	rsi, [rsp+5D8h+var_5C8]
		lea	rdi, [rsp+5D8h+var_578]
		call	sub_1D7C
		lea	rdi, aShitcpuSimulat ; "ShitCPU	Simulator 1.0"
		call	_puts
		lea	rdi, aAvailableComma ; "Available commands: run, registers, exi"...
		call	_puts
		lea	r15, a04x+4
		lea	r14, [rsp+5D8h+s]
		lea	r13, [rsp+5D8h+s1]
		lea	rax, [rsp+5D8h+var_578]
		mov	[rsp+5D8h+var_5D0], rax

loc_1996:				; CODE XREF: sub_18BC+130j
					; sub_18BC+2E4j
		mov	rsi, r15
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		mov	ebx, 0
		mov	ebp, 0
		mov	r12, cs:stdin_ptr

loc_19B9:				; CODE XREF: sub_18BC+124j
		mov	rdi, [r12]	; fp
		call	__IO_getc
		cmp	eax, 0FFFFFFFFh
		jz	short loc_19E2
		cmp	eax, 0Ah
		jz	short loc_19E2
		add	ebp, 1
		mov	[rsp+rbx+5D8h+s], al
		movsxd	rbx, ebp
		cmp	rbx, 1FEh
		jbe	short loc_19B9

loc_19E2:				; CODE XREF: sub_18BC+109j
					; sub_18BC+10Ej
		mov	[rsp+rbx+5D8h+s], 0
		test	ebx, ebx
		jz	short loc_1996
		lea	rsi, a04x+5	; reject
		mov	rdi, r14	; s
		call	_strcspn
		test	eax, eax
		jnz	short loc_1A13
		mov	edx, 201h
		mov	rsi, r14
		mov	rdi, r13
		call	___strcpy_chk
		jmp	short loc_1A31
; ---------------------------------------------------------------------------

loc_1A13:				; CODE XREF: sub_18BC+143j
		movsxd	rbx, eax
		mov	ecx, 201h
		mov	rdx, rbx
		mov	rsi, r14
		mov	rdi, r13
		call	___strncpy_chk
		mov	[rsp+rbx+5D8h+s1], 0

loc_1A31:				; CODE XREF: sub_18BC+155j
		lea	rsi, s2		; "quit"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jz	loc_1B68
		lea	rsi, aHelp	; "help"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1A6C
		lea	rdi, aAvailableComma ; "Available commands: run, registers, exi"...
		call	_puts
		jmp	loc_1B6F
; ---------------------------------------------------------------------------

loc_1A6C:				; CODE XREF: sub_18BC+19Dj
		lea	rsi, aRegisters	; "registers"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1A8E
		mov	rdi, [rsp+5D8h+var_5D0]
		call	sub_1DBE
		jmp	loc_1B76
; ---------------------------------------------------------------------------

loc_1A8E:				; CODE XREF: sub_18BC+1C1j
		lea	rsi, modes	; "rb"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1AB3
		mov	rsi, [rsp+5D8h+var_5D0]
		mov	rdi, r14
		call	sub_146E
		jmp	loc_1B7D
; ---------------------------------------------------------------------------

loc_1AB3:				; CODE XREF: sub_18BC+1E3j
		lea	rsi, aWb	; "wb"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1AD8
		mov	rsi, [rsp+5D8h+var_5D0]
		mov	rdi, r14
		call	sub_15D1
		jmp	loc_1B84
; ---------------------------------------------------------------------------

loc_1AD8:				; CODE XREF: sub_18BC+208j
		lea	rsi, aRw	; "rw"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1AFD
		mov	rsi, [rsp+5D8h+var_5D0]
		mov	rdi, r14
		call	sub_168E
		jmp	loc_1B8B
; ---------------------------------------------------------------------------

loc_1AFD:				; CODE XREF: sub_18BC+22Dj
		lea	rsi, aWw	; "ww"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1B1F
		mov	rsi, [rsp+5D8h+var_5D0]
		mov	rdi, r14
		call	sub_17F1
		jmp	short loc_1B92
; ---------------------------------------------------------------------------

loc_1B1F:				; CODE XREF: sub_18BC+252j
		lea	rsi, aRun	; "run"
		mov	rdi, r13	; s1
		call	_strcasecmp
		test	eax, eax
		jnz	short loc_1B55
		lea	rdi, aResettingCpuAn ; "Resetting CPU and running."
		call	_puts
		mov	rbx, [rsp+5D8h+var_5D0]
		mov	rdi, rbx
		call	sub_1DBE
		mov	rdi, rbx
		call	sub_2A92
; ---------------------------------------------------------------------------
		jmp	short loc_1B99
; ---------------------------------------------------------------------------

loc_1B55:				; CODE XREF: sub_18BC+274j
		lea	rdi, a?UnknownComman ; "? Unknown command."
		call	_puts
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B68:				; CODE XREF: sub_18BC+186j
		mov	eax, 1
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B6F:				; CODE XREF: sub_18BC+1ABj
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B76:				; CODE XREF: sub_18BC+1CDj
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B7D:				; CODE XREF: sub_18BC+1F2j
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B84:				; CODE XREF: sub_18BC+217j
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B8B:				; CODE XREF: sub_18BC+23Cj
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B92:				; CODE XREF: sub_18BC+261j
		mov	eax, 0
		jmp	short loc_1B9E
; ---------------------------------------------------------------------------

loc_1B99:				; CODE XREF: sub_18BC+297j
		mov	eax, 0

loc_1B9E:				; CODE XREF: sub_18BC+2AAj
					; sub_18BC+2B1j ...
		test	al, al
		jz	loc_1996
		lea	rdi, aSimulationEnde ; "Simulation ended."
		call	_puts
		lea	rdi, [rsp+5D8h+var_5B8]
		call	sub_2B38
		lea	rdi, [rsp+5D8h+var_5C8]
		call	sub_1C5E
		lea	rdi, [rsp+5D8h+var_578]
		call	nullsub_2
		mov	eax, 0
		mov	rcx, [rsp+5D8h+var_40]
		xor	rcx, fs:28h
		jz	short loc_1C22
		jmp	short loc_1C1D
; ---------------------------------------------------------------------------
		mov	rbx, rax
		lea	rdi, [rsp+arg_18]
		call	sub_2B38
		jmp	short loc_1BFC
; ---------------------------------------------------------------------------
		mov	rbx, rax

loc_1BFC:				; CODE XREF: sub_18BC+33Bj
		lea	rdi, [rsp+arg_8]
		call	sub_1C5E
		jmp	short loc_1C0B
; ---------------------------------------------------------------------------
		mov	rbx, rax

loc_1C0B:				; CODE XREF: sub_18BC+34Aj
		lea	rdi, [rsp+arg_58]
		call	nullsub_2
		mov	rdi, rbx
		call	__Unwind_Resume
; ---------------------------------------------------------------------------

loc_1C1D:				; CODE XREF: sub_18BC+32Cj
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_1C22:				; CODE XREF: sub_18BC+32Aj
		add	rsp, 5A8h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_18BC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C34	proc near		; CODE XREF: sub_18BC+39p
		push	rbx
		mov	rbx, rdi
		mov	[rdi], rsi
		mov	edi, 10000h
		call	__Znam		; operator new[](ulong)
		mov	[rbx+8], rax
		mov	edx, 10000h	; n
		mov	esi, 0		; c
		mov	rdi, rax	; s
		call	_memset
		pop	rbx
		retn
sub_1C34	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_1C5E	proc near		; CODE XREF: sub_18BC+305p
					; sub_18BC+345p
		mov	rdi, [rdi+8]	; void *
		test	rdi, rdi
		jz	short locret_1C74
		sub	rsp, 8
		call	__ZdlPv		; operator delete(void *)
		add	rsp, 8

locret_1C74:				; CODE XREF: sub_1C5E+7j
		rep retn
sub_1C5E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C76	proc near		; CODE XREF: sub_146E+10Bp
					; sub_2432+24p	...
		movzx	esi, si
		mov	rax, [rdi+8]
		movzx	eax, byte ptr [rax+rsi]
		retn
sub_1C76	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C82	proc near		; CODE XREF: sub_168E+10Bp
					; sub_24BA+24p	...
		cmp	si, 0FFFFh
		jnz	short loc_1CA0
		sub	rsp, 8
		mov	esi, 2
		mov	rdi, [rdi]
		call	sub_1F20
		mov	eax, 0
		jmp	short loc_1CAC
; ---------------------------------------------------------------------------

loc_1CA0:				; CODE XREF: sub_1C82+4j
		movzx	eax, si
		mov	rdx, [rdi+8]
		movzx	eax, word ptr [rdx+rax]
		retn
; ---------------------------------------------------------------------------

loc_1CAC:				; CODE XREF: sub_1C82+1Cj
		add	rsp, 8
		retn
sub_1C82	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_1CB2	proc near		; CODE XREF: sub_15D1+93p sub_247C+33p ...
		movzx	esi, si
		mov	rax, [rdi+8]
		mov	[rax+rsi], dl
		retn
sub_1CB2	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_1CBE	proc near		; CODE XREF: sub_17F1+A1p sub_2502+33p ...
		cmp	si, 0FFFFh
		jnz	short loc_1CD7
		sub	rsp, 8
		mov	esi, 2
		mov	rdi, [rdi]
		call	sub_1F20
		jmp	short loc_1CE3
; ---------------------------------------------------------------------------

loc_1CD7:				; CODE XREF: sub_1CBE+4j
		movzx	eax, si
		mov	rcx, [rdi+8]
		mov	[rcx+rax], dx
		retn
; ---------------------------------------------------------------------------

loc_1CE3:				; CODE XREF: sub_1CBE+17j
		add	rsp, 8
		retn
sub_1CBE	endp


; =============== S U B	R O U T	I N E =======================================


sub_1CE8	proc near
		mov	r8, rdx
		mov	edx, ecx
		movzx	eax, si
		movzx	ecx, cx
		add	ecx, eax
		mov	eax, 0
		cmp	ecx, 10000h
		ja	short locret_1D25
		sub	rsp, 8
		movzx	r9d, si
		add	r9, [rdi+8]
		mov	rdi, r9		; dest
		movzx	edx, dx		; n
		mov	rsi, r8		; src
		call	_memcpy
		mov	eax, 1
		add	rsp, 8

locret_1D25:				; CODE XREF: sub_1CE8+18j
		rep retn
sub_1CE8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1D30	proc near		; CODE XREF: sub_18BC+2Cp
		mov	qword ptr [rdi+110h], 0
		mov	qword ptr [rdi+118h], 0
		mov	eax, 0

loc_1D4B:				; CODE XREF: sub_1D30+2Bj
		mov	word ptr [rdi+rax], 0
		add	rax, 2
		cmp	rax, 80h
		jnz	short loc_1D4B
		mov	word ptr [rdi+100h], 0
		mov	word ptr [rdi+102h], 4000h
		mov	dword ptr [rdi+108h], 0
		retn
sub_1D30	endp

; [00000002 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS KEYPAD CTRL-"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_1D7C	proc near		; CODE XREF: sub_18BC+9Cp
		push	r12
		push	rbp
		push	rbx
		mov	rbx, rdi
		mov	r12, rsi
		mov	rbp, rdx
		call	_rand
		mov	[rbx+104h], ax
		call	_rand
		mov	[rbx+106h], ax
		mov	dword ptr [rbx+108h], 0
		mov	[rbx+110h], r12
		mov	[rbx+118h], rbp
		pop	rbx
		pop	rbp
		pop	r12
		retn
sub_1D7C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1DBE	proc near		; CODE XREF: sub_18BC+1C8p
					; sub_18BC+28Ap ...

var_30		= qword	ptr -30h

		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 98h
		mov	r12, rdi
		mov	rax, fs:28h
		mov	[rsp+0B8h+var_30], rax
		xor	eax, eax
		mov	ebp, 1
		mov	ebx, 0
		mov	r13, rsp
		jmp	short loc_1DF6
; ---------------------------------------------------------------------------

loc_1DF0:				; CODE XREF: sub_1DBE+9Ej
					; sub_1DBE+149j
		add	ebp, 1
		lea	ebx, [rbx+1]

loc_1DF6:				; CODE XREF: sub_1DBE+30j
		test	ebx, ebx
		jz	loc_1EBB
		test	bl, 3
		jnz	short loc_1E0D
		mov	edi, 0Ah	; c
		call	_putchar

loc_1E0D:				; CODE XREF: sub_1DBE+43j
		mov	r8d, ebx
		lea	rcx, aRD	; "R%d"
		mov	edx, 80h
		mov	esi, 1
		mov	rdi, r13
		mov	eax, 0
		call	___sprintf_chk
		mov	eax, ebx
		add	al, [r12+100h]
		and	eax, 7Fh
		movzx	ecx, word ptr [r12+rax*2]
		mov	rdx, r13
		lea	rsi, a3s0x04x	; " %-3s = 0x%04X"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		cmp	ebp, 0Fh
		jbe	short loc_1DF0
		mov	edi, 0Ah	; c
		call	_putchar
		movzx	edx, word ptr [r12+102h]
		lea	rsi, aPc0x04x	; " PC = 0x%04X\n"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		movzx	edx, word ptr [r12+100h]
		lea	rsi, aRegisterWindow ; " Register Window Pos = %d\n"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		mov	rax, [rsp+0B8h+var_30]
		xor	rax, fs:28h
		jz	short loc_1F11
		jmp	short loc_1F0C
; ---------------------------------------------------------------------------

loc_1EBB:				; CODE XREF: sub_1DBE+3Aj
		mov	r8d, ebx
		lea	rcx, aRD	; "R%d"
		mov	edx, 80h
		mov	esi, 1
		mov	rdi, r13
		mov	eax, 0
		call	___sprintf_chk
		mov	eax, ebx
		add	al, [r12+100h]
		and	eax, 7Fh
		movzx	ecx, word ptr [r12+rax*2]
		mov	rdx, r13
		lea	rsi, a3s0x04x	; " %-3s = 0x%04X"
		mov	edi, 1
		mov	eax, 0
		call	___printf_chk
		jmp	loc_1DF0
; ---------------------------------------------------------------------------

loc_1F0C:				; CODE XREF: sub_1DBE+FBj
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_1F11:				; CODE XREF: sub_1DBE+F9j
		add	rsp, 98h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		retn
sub_1DBE	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_1F20	proc near		; CODE XREF: sub_1C82+12p sub_1CBE+12p ...
		push	r12
		push	rbp
		push	rbx
		mov	rbp, rdi
		mov	ebx, esi
		lea	rdi, aExceptionEncou ; "\n\nException encountered. Dumping regi"...
		call	_puts
		mov	rdi, rbp
		call	sub_1DBE
		cmp	bl, 0Ah
		ja	short loc_1F9C
		movzx	r12d, bl
		lea	rax, unk_3AAC
		movsxd	rdx, dword ptr [rax+r12*4]
		add	rax, rdx
		jmp	rax
; ---------------------------------------------------------------------------
		lea	rdi, aSimulationEndi ; "Simulation ending. Max instructions rea"...
		call	_puts
		jmp	short loc_1FA8
; ---------------------------------------------------------------------------
		lea	rdi, aSimulationEn_0 ; "Simulation ending. Memory out of bounds"...
		call	_puts
		jmp	short loc_1FA8
; ---------------------------------------------------------------------------
		lea	rdi, aSimulationEn_1 ; "Simulation ending. Out of registers."
		call	_puts
		jmp	short loc_1FA8
; ---------------------------------------------------------------------------
		lea	rdi, aSimulationEn_2 ; "Simulation ending. Register underflow."
		call	_puts
		jmp	short loc_1FA8
; ---------------------------------------------------------------------------
		lea	rdi, aSimulationEn_3 ; "Simulation ending. Syscall attempted wh"...
		call	_puts
		jmp	short loc_1FA8
; ---------------------------------------------------------------------------

loc_1F9C:				; CODE XREF: sub_1F20+20j
		lea	rdi, aUnknownExcepti ; "Unknown	exception."
		call	_puts

loc_1FA8:				; CODE XREF: sub_1F20+42j sub_1F20+50j ...
		mov	edi, 0		; status
		call	_exit
sub_1F20	endp


; =============== S U B	R O U T	I N E =======================================


sub_1FB2	proc near		; CODE XREF: sub_22B6+1Ep sub_22DC+1Ep ...
		lea	eax, [rsi+rsi]
		test	sil, 80h
		jz	short loc_1FBF
		or	ax, 0FF00h

loc_1FBF:				; CODE XREF: sub_1FB2+7j
		add	[rdi+102h], ax
		retn
sub_1FB2	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_1FC8	proc near		; CODE XREF: sub_23D6+6p
		lea	eax, [rsi+rsi]
		test	esi, 800h
		jz	short loc_1FD7
		or	ax, 0F000h

loc_1FD7:				; CODE XREF: sub_1FC8+9j
		add	[rdi+102h], ax
		retn
sub_1FC8	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_1FE0	proc near		; CODE XREF: sub_234E+1Bp sub_2370+1Bp ...
		add	sil, [rdi+100h]
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rsi*2]
		and	eax, 0FFFEh
		add	[rdi+102h], ax
		retn
sub_1FE0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_1FFC	proc near
		mov	eax, esi
		and	eax, 0Fh
		retn
sub_1FFC	endp


; =============== S U B	R O U T	I N E =======================================


sub_2002	proc near
		shr	esi, 4
		and	esi, 0Fh
		mov	eax, esi
		retn
sub_2002	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_200C	proc near
		mov	rax, rsi
		movzx	eax, ah
		and	eax, 7
		retn
sub_200C	endp


; =============== S U B	R O U T	I N E =======================================


sub_2016	proc near
		shr	esi, 0Bh
		and	esi, 1
		mov	eax, esi
		retn
sub_2016	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_2020	proc near
		mov	eax, esi
		shr	ax, 0Ch
		retn
sub_2020	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2028	proc near		; CODE XREF: sub_2B9E+1Cp sub_2B9E+2Bp ...
		add	sil, [rdi+100h]
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rsi*2]
		retn
sub_2028	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2038	proc near		; CODE XREF: sub_2B9E+66p sub_2B9E+9Fp ...
		add	sil, [rdi+100h]
		and	esi, 7Fh
		mov	[rdi+rsi*2], dx
		retn
sub_2038	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2048	proc near		; CODE XREF: sub_2882+8p
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	ecx, edx
		sar	ecx, 8
		and	ecx, 7
		add	ecx, eax
		and	ecx, 7Fh
		sar	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rdx*2]
		add	ax, [rdi+rsi*2]
		mov	[rdi+rcx*2], ax
		retn
sub_2048	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_2080	proc near		; CODE XREF: sub_2882+2Ep
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	ecx, edx
		sar	ecx, 8
		and	ecx, 7
		add	ecx, eax
		and	ecx, 7Fh
		sar	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rdx*2]
		and	ax, [rdi+rsi*2]
		mov	[rdi+rcx*2], ax
		retn
sub_2080	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_20B8	proc near		; CODE XREF: sub_2882+50p
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	ecx, edx
		sar	ecx, 8
		and	ecx, 7
		add	ecx, eax
		and	ecx, 7Fh
		sar	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rdx*2]
		or	ax, [rdi+rsi*2]
		mov	[rdi+rcx*2], ax
		retn
sub_20B8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_20F0	proc near		; CODE XREF: sub_2882+70p
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	ecx, edx
		sar	ecx, 8
		and	ecx, 7
		add	ecx, eax
		and	ecx, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		sar	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		movzx	eax, word ptr [rdi+rsi*2]
		sub	ax, [rdi+rdx*2]
		mov	[rdi+rcx*2], ax
		retn
sub_20F0	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2128	proc near		; CODE XREF: sub_2882+DEp
		movzx	edx, word ptr [rdi+100h]
		mov	eax, esi
		and	eax, 0Fh
		add	eax, edx
		and	eax, 7Fh
		movzx	eax, word ptr [rdi+rax*2]
		movzx	esi, si
		mov	ecx, esi
		sar	ecx, 4
		and	ecx, 0Fh
		add	ecx, edx
		and	ecx, 7Fh
		movzx	ecx, word ptr [rdi+rcx*2]
		cmp	ax, cx
		jz	short loc_2163
		cmp	cx, ax
		sbb	eax, eax
		and	eax, 2
		sub	eax, 1
		jmp	short loc_2168
; ---------------------------------------------------------------------------

loc_2163:				; CODE XREF: sub_2128+2Cj
		mov	eax, 0

loc_2168:				; CODE XREF: sub_2128+39j
		sar	esi, 8
		and	esi, 7
		add	edx, esi
		and	edx, 7Fh
		mov	[rdi+rdx*2], ax
		retn
sub_2128	endp


; =============== S U B	R O U T	I N E =======================================


sub_2178	proc near		; CODE XREF: sub_2882+90p
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	ecx, edx
		sar	ecx, 8
		and	ecx, 7
		add	ecx, eax
		and	ecx, 7Fh
		sar	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rdx*2]
		xor	ax, [rdi+rsi*2]
		mov	[rdi+rcx*2], ax
		retn
sub_2178	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_21B0	proc near		; CODE XREF: sub_2882+B0p
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	ecx, edx
		sar	ecx, 8
		and	ecx, 7
		add	ecx, eax
		and	ecx, 7Fh
		sar	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	eax, word ptr [rdi+rdx*2]
		imul	ax, [rdi+rsi*2]
		mov	[rdi+rcx*2], ax
		retn
sub_21B0	endp


; =============== S U B	R O U T	I N E =======================================


sub_21E8	proc near		; CODE XREF: sub_2882+1B5p
		movzx	eax, word ptr [rdi+100h]
		mov	edx, esi
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		shr	esi, 4
		and	esi, 0Fh
		add	eax, esi
		and	eax, 7Fh
		movzx	eax, word ptr [rdi+rax*2]
		neg	eax
		mov	[rdi+rdx*2], ax
		retn
sub_21E8	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_2210	proc near		; CODE XREF: sub_2882+1C0p
		movzx	eax, word ptr [rdi+100h]
		mov	edx, esi
		shr	edx, 4
		and	edx, 0Fh
		add	edx, eax
		and	edx, 7Fh
		movzx	edx, word ptr [rdi+rdx*2]
		and	esi, 0Fh
		add	eax, esi
		and	eax, 7Fh
		mov	[rdi+rax*2], dx
		retn
sub_2210	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2236	proc near		; CODE XREF: sub_2882+D0p
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	r8d, edx
		sar	r8d, 8
		and	r8d, 7
		add	r8d, eax
		and	r8d, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	esi, word ptr [rdi+rsi*2]
		sar	edx, 4
		and	edx, 0Fh
		add	eax, edx
		and	eax, 7Fh
		movzx	ecx, word ptr [rdi+rax*2]
		sar	esi, cl
		mov	[rdi+r8*2], si
		retn
sub_2236	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2276	proc near		; CODE XREF: sub_2882+EEp
		movzx	eax, word ptr [rdi+100h]
		movzx	edx, si
		mov	r8d, edx
		sar	r8d, 8
		and	r8d, 7
		add	r8d, eax
		and	r8d, 7Fh
		and	esi, 0Fh
		add	esi, eax
		and	esi, 7Fh
		movzx	esi, word ptr [rdi+rsi*2]
		sar	edx, 4
		and	edx, 0Fh
		add	eax, edx
		and	eax, 7Fh
		movzx	ecx, word ptr [rdi+rax*2]
		shl	esi, cl
		mov	[rdi+r8*2], si
		retn
sub_2276	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_22B6	proc near		; CODE XREF: sub_2882+10Ep
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jnz	short locret_22D9
		shr	esi, 4
		and	esi, 0FFh
		call	sub_1FB2

locret_22D9:				; CODE XREF: sub_22B6+13j
		rep retn
sub_22B6	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_22DC	proc near		; CODE XREF: sub_2882+11Ep
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jz	short locret_22FF
		shr	esi, 4
		and	esi, 0FFh
		call	sub_1FB2

locret_22FF:				; CODE XREF: sub_22DC+13j
		rep retn
sub_22DC	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2302	proc near		; CODE XREF: sub_2882+12Ep
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jns	short locret_2325
		shr	esi, 4
		and	esi, 0FFh
		call	sub_1FB2

locret_2325:				; CODE XREF: sub_2302+13j
		rep retn
sub_2302	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2328	proc near		; CODE XREF: sub_2882+13Ep
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jle	short locret_234B
		shr	esi, 4
		and	esi, 0FFh
		call	sub_1FB2

locret_234B:				; CODE XREF: sub_2328+13j
		rep retn
sub_2328	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_234E	proc near		; CODE XREF: sub_2882+18Bp
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jnz	short locret_236E
		shr	esi, 4
		and	esi, 0Fh
		call	sub_1FE0

locret_236E:				; CODE XREF: sub_234E+13j
		rep retn
sub_234E	endp


; =============== S U B	R O U T	I N E =======================================


sub_2370	proc near		; CODE XREF: sub_2882+192p
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jz	short locret_2390
		shr	esi, 4
		and	esi, 0Fh
		call	sub_1FE0

locret_2390:				; CODE XREF: sub_2370+13j
		rep retn
sub_2370	endp


; =============== S U B	R O U T	I N E =======================================


sub_2392	proc near		; CODE XREF: sub_2882+1A0p
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jns	short locret_23B2
		shr	esi, 4
		and	esi, 0Fh
		call	sub_1FE0

locret_23B2:				; CODE XREF: sub_2392+13j
		rep retn
sub_2392	endp


; =============== S U B	R O U T	I N E =======================================


sub_23B4	proc near		; CODE XREF: sub_2882+1AEp
		mov	eax, esi
		and	eax, 0Fh
		add	al, [rdi+100h]
		and	eax, 7Fh
		cmp	word ptr [rdi+rax*2], 0
		jle	short locret_23D4
		shr	esi, 4
		and	esi, 0Fh
		call	sub_1FE0

locret_23D4:				; CODE XREF: sub_23B4+13j
		rep retn
sub_23B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_23D6	proc near		; CODE XREF: sub_2882+14Ep
		and	esi, 0FFFh
		call	sub_1FC8
		rep retn
sub_23D6	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_23E4	proc near		; CODE XREF: sub_2882+1CEp
		shr	esi, 4
		and	esi, 0Fh
		call	sub_1FE0
		rep retn
sub_23E4	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_23F2	proc near		; CODE XREF: sub_2882:loc_2895p
		mov	rax, rsi
		movzx	eax, ah
		and	eax, 7
		add	al, [rdi+100h]
		and	eax, 7Fh
		lea	rax, [rdi+rax*2]
		movzx	edx, word ptr [rax]
		mov	dl, 0
		movzx	esi, sil
		or	esi, edx
		mov	[rax], si
		retn
sub_23F2	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2418	proc near		; CODE XREF: sub_2882+3Ep
		movzx	esi, si
		mov	eax, esi
		sar	eax, 8
		and	eax, 7
		add	al, [rdi+100h]
		and	eax, 7Fh
		mov	[rdi+rax*2+1], sil
		retn
sub_2418	endp


; =============== S U B	R O U T	I N E =======================================


sub_2432	proc near		; CODE XREF: sub_2882+5Ep
		push	rbp
		push	rbx
		sub	rsp, 8
		mov	rbx, rdi
		mov	ebp, esi
		movzx	esi, word ptr [rdi+102h]
		movzx	eax, bpl
		lea	esi, [rsi+rax+2]
		movzx	esi, si
		mov	rdi, [rdi+110h]
		call	sub_1C76
		mov	rdx, rbp
		movzx	ebp, dh
		and	ebp, 7
		add	bpl, [rbx+100h]
		and	ebp, 7Fh
		movzx	eax, al
		mov	[rbx+rbp*2], ax
		add	rsp, 8
		pop	rbx
		pop	rbp
		retn
sub_2432	endp


; =============== S U B	R O U T	I N E =======================================


sub_247C	proc near		; CODE XREF: sub_2882+7Ep
		sub	rsp, 8
		mov	rax, rsi
		movzx	eax, ah
		and	eax, 7
		add	al, [rdi+100h]
		and	eax, 7Fh
		movzx	edx, byte ptr [rdi+rax*2]
		movzx	eax, word ptr [rdi+102h]
		movzx	esi, sil
		lea	esi, [rax+rsi+2]
		movzx	esi, si
		mov	rdi, [rdi+110h]
		call	sub_1CB2
		add	rsp, 8
		retn
sub_247C	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_24BA	proc near		; CODE XREF: sub_2882+9Ep
		push	rbp
		push	rbx
		sub	rsp, 8
		mov	rbx, rdi
		mov	ebp, esi
		movzx	eax, word ptr [rdi+102h]
		movzx	esi, sil
		lea	esi, [rax+rsi*2+2]
		movzx	esi, si
		mov	rdi, [rdi+110h]
		call	sub_1C82
		mov	rdx, rbp
		movzx	ebp, dh
		and	ebp, 7
		add	bpl, [rbx+100h]
		and	ebp, 7Fh
		mov	[rbx+rbp*2], ax
		add	rsp, 8
		pop	rbx
		pop	rbp
		retn
sub_24BA	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2502	proc near		; CODE XREF: sub_2882+BEp
		sub	rsp, 8
		mov	rax, rsi
		movzx	eax, ah
		and	eax, 7
		add	al, [rdi+100h]
		and	eax, 7Fh
		movzx	edx, word ptr [rdi+rax*2]
		movzx	eax, word ptr [rdi+102h]
		movzx	esi, sil
		lea	esi, [rax+rsi*2+2]
		movzx	esi, si
		mov	rdi, [rdi+110h]
		call	sub_1CBE
		add	rsp, 8
		retn
sub_2502	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_2540	proc near
		push	r12
		push	rbp
		push	rbx
		mov	rbp, rdi
		movzx	eax, si
		sar	eax, 1
		mov	edx, eax
		and	dx, 3FFh
		lea	r12d, [rdx+rdx]
		test	ah, 2
		jz	short loc_2562
		or	r12w, 0F800h

loc_2562:				; CODE XREF: sub_2540+1Aj
		and	si, 800h
		cmp	si, 1
		sbb	ebx, ebx
		and	ebx, 0FFFFFFFCh
		add	ebx, 8
		add	r12w, [rbp+102h]

loc_257B:				; CODE XREF: sub_2540+64j
		sub	ebx, 1
		mov	eax, ebx
		add	al, [rbp+100h]
		and	eax, 7Fh
		movzx	edx, word ptr [rbp+rax*2+0]
		movzx	esi, r12w
		mov	rdi, [rbp+110h]
		call	sub_1CBE
		add	r12d, 2
		test	bl, bl
		jnz	short loc_257B
		pop	rbx
		pop	rbp
		pop	r12
		retn
sub_2540	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_25AC	proc near		; CODE XREF: sub_2882+15Ep
		push	r12
		push	rbp
		push	rbx
		mov	rbp, rdi
		movzx	eax, si
		sar	eax, 1
		mov	edx, eax
		and	dx, 3FFh
		lea	r12d, [rdx+rdx]
		test	ah, 2
		jz	short loc_25CE
		or	r12w, 0F800h

loc_25CE:				; CODE XREF: sub_25AC+1Aj
		and	si, 800h
		cmp	si, 1
		sbb	ebx, ebx
		and	ebx, 0FFFFFFFCh
		add	ebx, 8
		add	r12w, [rbp+102h]

loc_25E7:				; CODE XREF: sub_25AC+64j
		movzx	esi, r12w
		mov	rdi, [rbp+110h]
		call	sub_1C82
		sub	ebx, 1
		mov	edx, ebx
		add	dl, [rbp+100h]
		and	edx, 7Fh
		mov	[rbp+rdx*2+0], ax
		add	r12d, 2
		test	bl, bl
		jnz	short loc_25E7
		pop	rbx
		pop	rbp
		pop	r12
		retn
sub_25AC	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2618	proc near		; CODE XREF: sub_2882+1D5p
		mov	eax, esi
		and	ax, 80h
		cmp	ax, 1
		sbb	eax, eax
		and	eax, 0FFFFFFF8h
		add	eax, 10h
		movzx	edx, al
		add	dx, [rdi+100h]
		mov	[rdi+100h], dx
		movzx	ecx, dx
		movzx	eax, al
		add	eax, ecx
		cmp	eax, 70h
		jle	short loc_2656
		sub	rsp, 8
		mov	esi, 3
		call	sub_1F20

loc_2656:				; CODE XREF: sub_2618+2Ej
		sub	ecx, 1
		movsxd	rcx, ecx
		movzx	eax, word ptr [rdi+102h]
		mov	[rdi+rcx*2], ax
		shr	esi, 4
		and	esi, 0Fh
		add	edx, esi
		and	edx, 7Fh
		movzx	eax, word ptr [rdi+rdx*2]
		and	eax, 0FFFFFFFEh
		mov	[rdi+102h], ax
		retn
sub_2618	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2682	proc near		; CODE XREF: sub_2882+FEp
		mov	eax, esi
		and	eax, 7FFh
		add	eax, eax
		mov	edx, eax
		and	dx, 800h
		mov	ecx, eax
		or	cx, 0F000h
		test	dx, dx
		cmovz	ecx, eax
		and	si, 800h
		cmp	si, 1
		sbb	eax, eax
		and	eax, 0FFFFFFF8h
		add	eax, 10h
		movzx	edx, al
		add	dx, [rdi+100h]
		mov	[rdi+100h], dx
		movzx	edx, dx
		movzx	esi, al
		add	esi, edx
		cmp	esi, 70h
		jle	short loc_26DC
		sub	rsp, 8
		mov	esi, 3
		call	sub_1F20

loc_26DC:				; CODE XREF: sub_2682+4Aj
		mov	r8d, ecx
		movzx	ecx, word ptr [rdi+102h]
		sub	edx, 1
		movsxd	rdx, edx
		mov	[rdi+rdx*2], cx
		add	ecx, r8d
		mov	[rdi+102h], cx
		retn
sub_2682	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_26FC	proc near		; CODE XREF: sub_2882+1E0p
		and	si, 800h
		cmp	si, 1
		sbb	eax, eax
		and	eax, 0FFFFFFF8h
		add	eax, 10h
		movzx	edx, word ptr [rdi+100h]
		movzx	eax, al
		cmp	dx, ax
		jnb	short loc_272A
		sub	rsp, 8
		mov	esi, 4
		call	sub_1F20

loc_272A:				; CODE XREF: sub_26FC+1Ej
		movzx	ecx, dx
		sub	ecx, 1
		movsxd	rcx, ecx
		movzx	ecx, word ptr [rdi+rcx*2]
		mov	[rdi+102h], cx
		sub	edx, eax
		mov	[rdi+100h], dx
		retn
sub_26FC	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_2748	proc near		; CODE XREF: sub_2882+1EEp
		sub	rsp, 8
		mov	rax, rdi
		shr	esi, 4
		and	esi, 0Fh
		add	sil, [rdi+100h]
		and	esi, 7Fh
		movzx	edx, word ptr [rdi+rsi*2]
		mov	rdi, [rdi+118h]
		mov	rsi, rax
		call	sub_3540
		add	rsp, 8
		retn
sub_2748	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_2778	proc near		; CODE XREF: sub_27CE:loc_2837p
					; sub_27CE:loc_284Cp
		movzx	ecx, word ptr [rdi+104h]
		movzx	eax, word ptr [rdi+106h]
		cmp	cx, ax
		jbe	short loc_2792
		mov	edx, eax
		imul	edx, ecx
		jmp	short loc_2799
; ---------------------------------------------------------------------------

loc_2792:				; CODE XREF: sub_2778+11j
		mov	edx, ecx
		neg	edx
		imul	edx, eax

loc_2799:				; CODE XREF: sub_2778+18j
		xor	ecx, edx
		mov	esi, edx
		xor	esi, eax
		cmp	dx, ax
		cmovbe	ecx, esi
		movzx	esi, word ptr [rdi+100h]
		mov	r8, rsi
		and	r8d, 7Fh
		mov	eax, 0
		cmp	dx, [rdi+r8*2]
		jnz	short locret_27CC
		add	esi, 1
		and	esi, 7Fh
		cmp	cx, [rdi+rsi*2]
		setz	al

locret_27CC:				; CODE XREF: sub_2778+45j
		rep retn
sub_2778	endp


; =============== S U B	R O U T	I N E =======================================


sub_27CE	proc near		; CODE XREF: sub_2882+1F5p
		push	rbx
		mov	rbx, rdi
		and	esi, 3
		cmp	sil, 1
		jz	short loc_280C
		cmp	sil, 1
		jb	short loc_27F2
		cmp	sil, 2
		jz	short loc_2837
		cmp	sil, 3
		jz	short loc_284C
		nop	dword ptr [rax]
		jmp	short loc_285F
; ---------------------------------------------------------------------------

loc_27F2:				; CODE XREF: sub_27CE+11j
		movzx	eax, word ptr [rdi+100h]
		and	eax, 7Fh
		mov	rdx, [rdi+118h]
		movzx	edx, byte ptr [rdx]
		mov	[rdi+rax*2], dx
		jmp	short loc_285F
; ---------------------------------------------------------------------------

loc_280C:				; CODE XREF: sub_27CE+Bj
		movzx	eax, word ptr [rdi+100h]
		mov	rdx, rax
		and	edx, 7Fh
		movzx	ecx, word ptr [rdi+104h]
		mov	[rdi+rdx*2], cx
		add	eax, 1
		and	eax, 7Fh
		movzx	edx, word ptr [rdi+106h]
		mov	[rdi+rax*2], dx
		jmp	short loc_285F
; ---------------------------------------------------------------------------

loc_2837:				; CODE XREF: sub_27CE+17j
		call	sub_2778
		test	al, al
		jz	short loc_285F
		mov	rax, [rbx+118h]
		mov	byte ptr [rax],	1
		jmp	short loc_285F
; ---------------------------------------------------------------------------

loc_284C:				; CODE XREF: sub_27CE+1Dj
		call	sub_2778
		test	al, al
		jz	short loc_285F
		mov	rax, [rbx+118h]
		mov	byte ptr [rax],	0

loc_285F:				; CODE XREF: sub_27CE+22j sub_27CE+3Cj ...
		pop	rbx
		retn
sub_27CE	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2862	proc near		; CODE XREF: sub_2A92+3Ep
		sub	rsp, 8
		mov	eax, esi
		movzx	esi, si
		shr	ax, 0Ch
		movzx	edx, al
		lea	rax, unk_3AD8
		movsxd	rdx, dword ptr [rax+rdx*4]
		add	rax, rdx
		jmp	rax
sub_2862	endp


; =============== S U B	R O U T	I N E =======================================


sub_2882	proc near
		test	esi, 800h
		jnz	short loc_2895
		call	sub_2048
		nop
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_2895:				; CODE XREF: sub_2882+6j
		call	sub_23F2
		nop	word ptr [rax+rax+00h]
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		test	esi, 800h
		jnz	short loc_28BA
		nop	dword ptr [rax]
		call	sub_2080
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_28BA:				; CODE XREF: sub_2882+29j
		nop	word ptr [rax+rax+00h]
		call	sub_2418
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		test	esi, 800h
		jnz	short loc_28DC
		call	sub_20B8
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_28DC:				; CODE XREF: sub_2882+4Ej
		nop	dword ptr [rax+00h]
		call	sub_2432
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		test	esi, 800h
		jnz	short loc_28FC
		call	sub_20F0
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_28FC:				; CODE XREF: sub_2882+6Ej
		nop	dword ptr [rax+00h]
		call	sub_247C
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		test	esi, 800h
		jnz	short loc_291C
		call	sub_2178
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_291C:				; CODE XREF: sub_2882+8Ej
		nop	dword ptr [rax+00h]
		call	sub_24BA
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		test	esi, 800h
		jnz	short loc_293C
		call	sub_21B0
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_293C:				; CODE XREF: sub_2882+AEj
		nop	dword ptr [rax+00h]
		call	sub_2502
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		test	esi, 800h
		jnz	short loc_295C
		call	sub_2236
		jmp	loc_2A8C
; ---------------------------------------------------------------------------

loc_295C:				; CODE XREF: sub_2882+CEj
		nop	dword ptr [rax+00h]
		call	sub_2128
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_2276
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 20h
		call	sub_2682
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_22B6
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 20h
		call	sub_22DC
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_2302
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 20h
		call	sub_2328
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_23D6
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		align 20h
		call	sub_25AC
		jmp	loc_2A8C
; ---------------------------------------------------------------------------
		mov	eax, esi
		sar	eax, 8
		and	eax, 0Fh
		cmp	eax, 0Ah
		ja	loc_2A82
		mov	eax, eax
		lea	rdx, unk_3B18
		movsxd	rax, dword ptr [rdx+rax*4]
		add	rdx, rax
		jmp	rdx
; ---------------------------------------------------------------------------
		call	sub_234E
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_2370
		nop	dword ptr [rax+00000000h]
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_2392
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_23B4
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_21E8
		nop	dword ptr [rax+00h]
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_2210
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_23E4
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_2618
		nop	dword ptr [rax+00h]
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_26FC
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		align 10h
		call	sub_2748
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------
		call	sub_27CE
		nop	dword ptr [rax+00h]
		jmp	short loc_2A8C
; ---------------------------------------------------------------------------

loc_2A82:				; CODE XREF: sub_2882+173j
		mov	esi, 1
		call	sub_1F20

loc_2A8C:				; CODE XREF: sub_2882+Ej sub_2882+1Ej	...
		add	rsp, 8
		retn
sub_2882	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_2A92	proc near		; CODE XREF: sub_18BC+292p
		push	rbx
		mov	rbx, rdi
		cmp	dword ptr [rdi+108h], 4E20h
		jbe	short loc_2AAF

loc_2AA2:				; CODE XREF: sub_2A92+59j
		mov	esi, 0Ah
		mov	rdi, rbx
		call	sub_1F20

loc_2AAF:				; CODE XREF: sub_2A92+Ej sub_2A92+57j
		movzx	esi, word ptr [rbx+102h]
		mov	rdi, [rbx+110h]
		call	sub_1C82
		add	word ptr [rbx+102h], 2
		movzx	esi, ax
		mov	rdi, rbx
		call	sub_2862
		mov	eax, [rbx+108h]
		add	eax, 1
		mov	[rbx+108h], eax
		cmp	eax, 4E20h
		jbe	short loc_2AAF
		jmp	short loc_2AA2
sub_2A92	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_2AF0	proc near		; CODE XREF: sub_18BC+43p
		mov	qword ptr [rdi+8], 0
		mov	qword ptr [rdi+10h], 0
		mov	qword ptr [rdi+18h], 0
		mov	qword ptr [rdi+20h], 0
		mov	byte ptr [rdi+28h], 0
		mov	dword ptr [rdi+2Ch], 0
		mov	dword ptr [rdi+30h], 0
		mov	dword ptr [rdi+34h], 0
		mov	dword ptr [rdi+38h], 0
		mov	byte ptr [rdi+3Ch], 0
		mov	byte ptr [rdi],	1
		retn
sub_2AF0	endp


; =============== S U B	R O U T	I N E =======================================


sub_2B38	proc near		; CODE XREF: sub_18BC+2FBp
					; sub_18BC+336p
		push	r12
		push	rbp
		push	rbx
		mov	r12, rdi
		cmp	byte ptr [rdi+28h], 0
		jz	short loc_2B6C
		mov	rbp, rdi
		mov	ebx, 0

loc_2B4D:				; CODE XREF: sub_2B38+32j
		mov	rdi, [rbp+8]	; stream
		test	rdi, rdi
		jz	short loc_2B5B
		call	_fclose

loc_2B5B:				; CODE XREF: sub_2B38+1Cj
		add	ebx, 1
		add	rbp, 8
		movzx	eax, byte ptr [r12+28h]
		cmp	eax, ebx
		ja	short loc_2B4D

loc_2B6C:				; CODE XREF: sub_2B38+Bj
		cmp	byte ptr [r12+3Ch], 0
		jz	short loc_2B99
		mov	rbp, r12
		mov	ebx, 0

loc_2B7C:				; CODE XREF: sub_2B38+5Fj
		mov	edi, [rbp+2Ch]	; fd
		test	edi, edi
		jz	short loc_2B88
		call	_close

loc_2B88:				; CODE XREF: sub_2B38+49j
		add	ebx, 1
		add	rbp, 4
		movzx	eax, byte ptr [r12+3Ch]
		cmp	eax, ebx
		ja	short loc_2B7C

loc_2B99:				; CODE XREF: sub_2B38+3Aj
		pop	rbx
		pop	rbp
		pop	r12
		retn
sub_2B38	endp


; =============== S U B	R O U T	I N E =======================================


sub_2B9E	proc near		; CODE XREF: sub_3540+C2p

ptr		= qword	ptr -50h
var_39		= byte ptr -39h

		push	r15
		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 28h
		mov	rbx, rdi
		mov	r12, rsi
		mov	esi, 1
		mov	rdi, r12
		call	sub_2028
		mov	ebp, eax
		mov	esi, 2
		mov	rdi, r12
		call	sub_2028
		mov	r14d, eax
		mov	esi, 3
		mov	rdi, r12
		call	sub_2028
		mov	r15d, eax
		movzx	eax, byte ptr [rbx+28h]
		cmp	bp, ax
		jnb	short loc_2BF7
		movzx	ebp, bp
		mov	r13, [rbx+rbp*8+8]
		test	r13, r13
		jnz	short loc_2C0E

loc_2BF7:				; CODE XREF: sub_2B9E+4Aj
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	loc_2C92
; ---------------------------------------------------------------------------

loc_2C0E:				; CODE XREF: sub_2B9E+57j
		cmp	r14w, 100h
		ja	short loc_2C30
		movzx	r14d, r14w
		mov	ebx, 0
		lea	rax, [rsp+58h+var_39]
		mov	[rsp+58h+ptr], rax
		test	r14d, r14d
		jnz	short loc_2C44
		jmp	short loc_2C82
; ---------------------------------------------------------------------------

loc_2C30:				; CODE XREF: sub_2B9E+76j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	short loc_2C92
; ---------------------------------------------------------------------------

loc_2C44:				; CODE XREF: sub_2B9E+8Ej sub_2B9E+E2j
		lea	ebp, [r15+rbx]
		mov	rcx, r13	; stream
		mov	edx, 1		; n
		mov	esi, 1		; size
		mov	rdi, [rsp+58h+ptr] ; ptr
		call	_fread
		cmp	rax, 1
		jnz	short loc_2C82
		movzx	edx, [rsp+58h+var_39]
		movzx	esi, bp
		mov	rdi, [r12+110h]
		call	sub_1CB2
		add	ebx, 1
		cmp	r14d, ebx
		ja	short loc_2C44

loc_2C82:				; CODE XREF: sub_2B9E+90j sub_2B9E+C5j
		movzx	edx, bx
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038

loc_2C92:				; CODE XREF: sub_2B9E+6Bj sub_2B9E+A4j
		add	rsp, 28h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_2B9E	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2CA2	proc near		; CODE XREF: sub_3540+D7p

buf		= qword	ptr -50h
var_39		= byte ptr -39h

		push	r15
		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 28h
		mov	rbx, rdi
		mov	r12, rsi
		mov	esi, 1
		mov	rdi, r12
		call	sub_2028
		mov	ebp, eax
		mov	esi, 2
		mov	rdi, r12
		call	sub_2028
		mov	r14d, eax
		mov	esi, 3
		mov	rdi, r12
		call	sub_2028
		mov	r15d, eax
		movzx	eax, byte ptr [rbx+3Ch]
		cmp	bp, ax
		jnb	short loc_2CFC
		movzx	ebp, bp
		mov	r13d, [rbx+rbp*4+2Ch]
		cmp	r13d, 0FFFFFFFFh
		jnz	short loc_2D10

loc_2CFC:				; CODE XREF: sub_2CA2+4Aj
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	short loc_2D8F
; ---------------------------------------------------------------------------

loc_2D10:				; CODE XREF: sub_2CA2+58j
		cmp	r14w, 100h
		ja	short loc_2D32
		movzx	r14d, r14w
		mov	ebx, 0
		lea	rax, [rsp+58h+var_39]
		mov	[rsp+58h+buf], rax
		test	r14d, r14d
		jnz	short loc_2D46
		jmp	short loc_2D7F
; ---------------------------------------------------------------------------

loc_2D32:				; CODE XREF: sub_2CA2+74j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	short loc_2D8F
; ---------------------------------------------------------------------------

loc_2D46:				; CODE XREF: sub_2CA2+8Cj sub_2CA2+DBj
		lea	ebp, [r15+rbx]
		mov	edx, 1		; nbytes
		mov	rsi, [rsp+58h+buf] ; buf
		mov	edi, r13d	; fd
		call	_read
		cmp	rax, 1
		jnz	short loc_2D7F
		movzx	edx, [rsp+58h+var_39]
		movzx	esi, bp
		mov	rdi, [r12+110h]
		call	sub_1CB2
		add	ebx, 1
		cmp	r14d, ebx
		ja	short loc_2D46

loc_2D7F:				; CODE XREF: sub_2CA2+8Ej sub_2CA2+BEj
		movzx	edx, bx
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038

loc_2D8F:				; CODE XREF: sub_2CA2+6Cj sub_2CA2+A2j
		add	rsp, 28h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_2CA2	endp


; =============== S U B	R O U T	I N E =======================================


sub_2D9E	proc near		; CODE XREF: sub_3540+E2p

buf		= byte ptr -39h

		push	r15
		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 18h
		mov	rbx, rdi
		mov	rbp, rsi
		mov	esi, 1
		mov	rdi, rbp
		call	sub_2028
		mov	r12d, eax
		mov	esi, 2
		mov	rdi, rbp
		call	sub_2028
		mov	r13d, eax
		mov	esi, 3
		mov	rdi, rbp
		call	sub_2028
		mov	r14d, eax
		movzx	eax, byte ptr [rbx+3Ch]
		cmp	r12w, ax
		jnb	short loc_2DFB
		movzx	r12d, r12w
		mov	r12d, [rbx+r12*4+2Ch]
		cmp	r12d, 0FFFFFFFFh
		jnz	short loc_2E0F

loc_2DFB:				; CODE XREF: sub_2D9E+4Cj
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038
		jmp	short loc_2E85
; ---------------------------------------------------------------------------

loc_2E0F:				; CODE XREF: sub_2D9E+5Bj
		cmp	r13w, 100h
		ja	short loc_2E2C
		movzx	r13d, r13w
		mov	ebx, 0
		lea	r15, [rsp+48h+buf]
		test	r13d, r13d
		jnz	short loc_2E40
		jmp	short loc_2E75
; ---------------------------------------------------------------------------

loc_2E2C:				; CODE XREF: sub_2D9E+77j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038
		jmp	short loc_2E85
; ---------------------------------------------------------------------------

loc_2E40:				; CODE XREF: sub_2D9E+8Aj sub_2D9E+D5j
		lea	esi, [r14+rbx]
		movzx	esi, si
		mov	rdi, [rbp+110h]
		call	sub_1C76
		mov	[rsp+48h+buf], al
		mov	edx, 1		; n
		mov	rsi, r15	; buf
		mov	edi, r12d	; fd
		call	_write
		cmp	rax, 1
		jnz	short loc_2E75
		add	ebx, 1
		cmp	r13d, ebx
		ja	short loc_2E40

loc_2E75:				; CODE XREF: sub_2D9E+8Cj sub_2D9E+CDj
		movzx	edx, bx
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038

loc_2E85:				; CODE XREF: sub_2D9E+6Fj sub_2D9E+A0j
		add	rsp, 18h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_2D9E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_2E94	proc near		; CODE XREF: sub_3540+F7p
		sub	rsp, 8
		lea	rdi, aExitSyscallRec ; "Exit syscall received. Simulation endin"...
		call	_puts
		mov	edi, 0		; status
		call	_exit
sub_2E94	endp


; =============== S U B	R O U T	I N E =======================================


sub_2EAE	proc near		; CODE XREF: sub_3540+100p

var_48		= word ptr -48h
var_46		= word ptr -46h
var_44		= dword	ptr -44h
var_30		= qword	ptr -30h

		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 20h
		mov	rbp, rdi
		mov	rbx, rsi
		mov	rax, fs:28h
		mov	[rsp+48h+var_30], rax
		xor	eax, eax
		mov	esi, 1
		mov	rdi, rbx
		call	sub_2028
		mov	r12d, eax
		mov	esi, 2
		mov	rdi, rbx
		call	sub_2028
		mov	r14d, eax
		mov	esi, 3
		mov	rdi, rbx
		call	sub_2028
		mov	r13d, eax
		mov	esi, 4
		mov	rdi, rbx
		call	sub_2028
		movzx	edx, byte ptr [rbp+3Ch]
		cmp	r12w, dx
		jnb	short loc_2F25
		movzx	r12d, r12w
		mov	edi, [rbp+r12*4+2Ch] ; fd
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_2F39

loc_2F25:				; CODE XREF: sub_2EAE+67j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_2F8B
; ---------------------------------------------------------------------------

loc_2F39:				; CODE XREF: sub_2EAE+75j
		mov	[rsp+48h+var_48], 2
		shl	r14d, 10h
		movzx	r13d, r13w
		or	r13d, r14d
		mov	[rsp+48h+var_44], r13d
		mov	[rsp+48h+var_46], ax
		mov	rsi, rsp	; addr
		mov	edx, 10h	; len
		call	_connect
		test	eax, eax
		jns	short loc_2F79
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_2F8B
; ---------------------------------------------------------------------------

loc_2F79:				; CODE XREF: sub_2EAE+B5j
		mov	edx, 0
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038

loc_2F8B:				; CODE XREF: sub_2EAE+89j sub_2EAE+C9j
		mov	rax, [rsp+48h+var_30]
		xor	rax, fs:28h
		jz	short loc_2FA0
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_2FA0:				; CODE XREF: sub_2EAE+EBj
		add	rsp, 20h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		retn
sub_2EAE	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_2FAE	proc near		; CODE XREF: sub_3540+107p

var_38		= word ptr -38h
var_36		= word ptr -36h
var_34		= dword	ptr -34h
var_20		= qword	ptr -20h

		push	r12
		push	rbp
		push	rbx
		sub	rsp, 20h
		mov	rbp, rdi
		mov	rbx, rsi
		mov	rax, fs:28h
		mov	[rsp+38h+var_20], rax
		xor	eax, eax
		mov	esi, 1
		mov	rdi, rbx
		call	sub_2028
		mov	r12d, eax
		mov	esi, 2
		mov	rdi, rbx
		call	sub_2028
		movzx	edx, byte ptr [rbp+3Ch]
		cmp	r12w, dx
		jnb	short loc_3001
		movzx	r12d, r12w
		mov	ebp, [rbp+r12*4+2Ch]
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_3015

loc_3001:				; CODE XREF: sub_2FAE+43j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_3085
; ---------------------------------------------------------------------------

loc_3015:				; CODE XREF: sub_2FAE+51j
		mov	[rsp+38h+var_38], 2
		mov	[rsp+38h+var_34], 0
		mov	[rsp+38h+var_36], ax
		mov	rsi, rsp	; addr
		mov	edx, 10h	; len
		mov	edi, ebp	; fd
		call	_bind
		test	eax, eax
		jns	short loc_304F
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_3085
; ---------------------------------------------------------------------------

loc_304F:				; CODE XREF: sub_2FAE+8Bj
		mov	esi, 3		; n
		mov	edi, ebp	; fd
		call	_listen
		test	eax, eax
		jns	short loc_3073
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_3085
; ---------------------------------------------------------------------------

loc_3073:				; CODE XREF: sub_2FAE+AFj
		mov	edx, 0
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038

loc_3085:				; CODE XREF: sub_2FAE+65j sub_2FAE+9Fj ...
		mov	rax, [rsp+38h+var_20]
		xor	rax, fs:28h
		jz	short loc_309A
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_309A:				; CODE XREF: sub_2FAE+E5j
		add	rsp, 20h
		pop	rbx
		pop	rbp
		pop	r12
		retn
sub_2FAE	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_30A4	proc near		; CODE XREF: sub_3540+112p
		push	rbp
		push	rbx
		sub	rsp, 8
		mov	rbp, rdi
		mov	rbx, rsi
		mov	esi, 1
		mov	rdi, rbx
		call	sub_2028
		movzx	edx, byte ptr [rbp+3Ch]
		cmp	ax, dx
		jnb	short loc_30D2
		movzx	eax, ax
		mov	edi, [rbp+rax*4+2Ch] ; fd
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_30E6

loc_30D2:				; CODE XREF: sub_30A4+20j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_3132
; ---------------------------------------------------------------------------

loc_30E6:				; CODE XREF: sub_30A4+2Cj
		mov	edx, 0		; addr_len
		mov	esi, 0		; addr
		call	_accept
		mov	ebp, eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_3110
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_3132
; ---------------------------------------------------------------------------

loc_3110:				; CODE XREF: sub_30A4+56j
		mov	edx, 0
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		movzx	edx, bp
		mov	esi, 1
		mov	rdi, rbx
		call	sub_2038

loc_3132:				; CODE XREF: sub_30A4+40j sub_30A4+6Aj
		add	rsp, 8
		pop	rbx
		pop	rbp
		retn
sub_30A4	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_313A	proc near
		movzx	eax, byte ptr [rdi+3Ch]
		cmp	ax, si
		jbe	short loc_314B
		movzx	esi, si
		mov	eax, [rdi+rsi*4+2Ch]
		retn
; ---------------------------------------------------------------------------

loc_314B:				; CODE XREF: sub_313A+7j
		mov	eax, 0FFFFFFFFh
		retn
sub_313A	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_3152	proc near
		movzx	eax, byte ptr [rdi+28h]
		cmp	ax, si
		jbe	short loc_3164
		movzx	esi, si
		mov	rax, [rdi+rsi*8+8]
		retn
; ---------------------------------------------------------------------------

loc_3164:				; CODE XREF: sub_3152+7j
		mov	eax, 0
		retn
sub_3152	endp


; =============== S U B	R O U T	I N E =======================================


sub_316A	proc near		; CODE XREF: sub_3378+5Dp
		movzx	r8d, byte ptr [rdi+3Ch]
		movzx	ecx, r8b
		test	ecx, ecx
		jz	short loc_31BD
		cmp	dword ptr [rdi+2Ch], 0FFFFFFFFh
		jz	short loc_31B1
		mov	rdx, rdi
		mov	eax, 0
		jmp	short loc_3191
; ---------------------------------------------------------------------------

loc_3187:				; CODE XREF: sub_316A+2Cj
		add	rdx, 4
		cmp	dword ptr [rdx+2Ch], 0FFFFFFFFh
		jz	short loc_31B6

loc_3191:				; CODE XREF: sub_316A+1Bj
		add	eax, 1
		cmp	eax, ecx
		jb	short loc_3187
		jmp	short loc_31BD
; ---------------------------------------------------------------------------

loc_319A:				; CODE XREF: sub_316A+57j
		lea	eax, [r8+1]
		mov	[rdi+3Ch], al
		movzx	r8d, r8b
		mov	[rdi+r8*4+2Ch],	esi
		movzx	eax, al
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_31B1:				; CODE XREF: sub_316A+11j
		mov	eax, 0

loc_31B6:				; CODE XREF: sub_316A+25j
		mov	edx, eax
		mov	[rdi+rdx*4+2Ch], esi
		retn
; ---------------------------------------------------------------------------

loc_31BD:				; CODE XREF: sub_316A+Bj sub_316A+2Ej
		cmp	r8b, 3
		jbe	short loc_319A
		mov	eax, 0FFFFFFFFh
		retn
sub_316A	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_31CA	proc near		; CODE XREF: sub_341E+E5p
		movzx	r8d, byte ptr [rdi+28h]
		movzx	ecx, r8b
		test	ecx, ecx
		jz	short loc_3220
		cmp	qword ptr [rdi+8], 0
		jz	short loc_3213
		mov	rdx, rdi
		mov	eax, 0
		jmp	short loc_31F3
; ---------------------------------------------------------------------------

loc_31E8:				; CODE XREF: sub_31CA+2Ej
		add	rdx, 8
		cmp	qword ptr [rdx+8], 0
		jz	short loc_3218

loc_31F3:				; CODE XREF: sub_31CA+1Cj
		add	eax, 1
		cmp	eax, ecx
		jb	short loc_31E8
		jmp	short loc_3220
; ---------------------------------------------------------------------------

loc_31FC:				; CODE XREF: sub_31CA+5Aj
		lea	eax, [r8+1]
		mov	[rdi+28h], al
		movzx	r8d, r8b
		mov	[rdi+r8*8+8], rsi
		movzx	eax, al
		sub	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_3213:				; CODE XREF: sub_31CA+12j
		mov	eax, 0

loc_3218:				; CODE XREF: sub_31CA+27j
		mov	edx, eax
		mov	[rdi+rdx*8+8], rsi
		retn
; ---------------------------------------------------------------------------

loc_3220:				; CODE XREF: sub_31CA+Bj sub_31CA+30j
		cmp	r8b, 3
		jbe	short loc_31FC
		mov	eax, 0FFFFFFFFh
		retn
sub_31CA	endp


; =============== S U B	R O U T	I N E =======================================


sub_322C	proc near		; CODE XREF: sub_3254+46p
		movzx	eax, byte ptr [rdi+3Ch]
		cmp	ax, si
		jbe	short locret_3252
		push	rbx
		movzx	edx, si
		lea	rbx, [rdi+rdx*4]
		mov	edi, [rbx+2Ch]	; fd
		cmp	edi, 0FFFFFFFFh
		jz	short loc_324A
		call	_close

loc_324A:				; CODE XREF: sub_322C+17j
		mov	dword ptr [rbx+2Ch], 0FFFFFFFFh
		pop	rbx

locret_3252:				; CODE XREF: sub_322C+7j
		rep retn
sub_322C	endp


; =============== S U B	R O U T	I N E =======================================


sub_3254	proc near		; CODE XREF: sub_3540+F0p
		push	rbp
		push	rbx
		sub	rsp, 8
		mov	rbx, rdi
		mov	rbp, rsi
		mov	esi, 1
		mov	rdi, rbp
		call	sub_2028
		movzx	esi, ax
		movzx	edx, byte ptr [rbx+3Ch]
		cmp	ax, dx
		jnb	short loc_3283
		movsxd	rax, esi
		cmp	dword ptr [rbx+rax*4+2Ch], 0FFFFFFFFh
		jnz	short loc_3297

loc_3283:				; CODE XREF: sub_3254+23j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038
		jmp	short loc_32B1
; ---------------------------------------------------------------------------

loc_3297:				; CODE XREF: sub_3254+2Dj
		mov	rdi, rbx
		call	sub_322C
		mov	edx, 0
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038

loc_32B1:				; CODE XREF: sub_3254+41j
		add	rsp, 8
		pop	rbx
		pop	rbp
		retn
sub_3254	endp


; =============== S U B	R O U T	I N E =======================================


sub_32B8	proc near		; CODE XREF: sub_32E2+47p
		movzx	eax, byte ptr [rdi+28h]
		cmp	ax, si
		jbe	short locret_32E0
		push	rbx
		movzx	edx, si
		lea	rbx, [rdi+rdx*8]
		mov	rdi, [rbx+8]	; stream
		test	rdi, rdi
		jz	short loc_32D7
		call	_fclose

loc_32D7:				; CODE XREF: sub_32B8+18j
		mov	qword ptr [rbx+8], 0
		pop	rbx

locret_32E0:				; CODE XREF: sub_32B8+7j
		rep retn
sub_32B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_32E2	proc near		; CODE XREF: sub_3540+B4p
		push	rbp
		push	rbx
		sub	rsp, 8
		mov	rbx, rdi
		mov	rbp, rsi
		mov	esi, 1
		mov	rdi, rbp
		call	sub_2028
		movzx	esi, ax
		movzx	edx, byte ptr [rbx+28h]
		cmp	ax, dx
		jnb	short loc_3312
		movsxd	rax, esi
		cmp	qword ptr [rbx+rax*8+8], 0
		jnz	short loc_3326

loc_3312:				; CODE XREF: sub_32E2+23j
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038
		jmp	short loc_3340
; ---------------------------------------------------------------------------

loc_3326:				; CODE XREF: sub_32E2+2Ej
		mov	rdi, rbx
		call	sub_32B8
		mov	edx, 0
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038

loc_3340:				; CODE XREF: sub_32E2+42j
		add	rsp, 8
		pop	rbx
		pop	rbp
		retn
sub_32E2	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_3348	proc near		; CODE XREF: sub_3378+Cp
		movzx	esi, byte ptr [rdi+3Ch]
		test	esi, esi
		jz	short loc_3371
		mov	edx, 0
		mov	eax, 0

loc_335A:				; CODE XREF: sub_3348+25j
		cmp	dword ptr [rdi+rdx*4+2Ch], 0FFFFFFFFh
		setnz	cl
		movzx	ecx, cl
		add	eax, ecx
		add	rdx, 1
		cmp	esi, edx
		ja	short loc_335A
		rep retn
; ---------------------------------------------------------------------------

loc_3371:				; CODE XREF: sub_3348+6j
		mov	eax, 0
		retn
sub_3348	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


sub_3378	proc near		; CODE XREF: sub_3540+D0p
		push	rbp
		push	rbx
		sub	rsp, 8
		mov	rbx, rdi
		mov	rbp, rsi
		call	sub_3348
		cmp	ax, 3
		jbe	short loc_33A3
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038
		jmp	short loc_33EA
; ---------------------------------------------------------------------------

loc_33A3:				; CODE XREF: sub_3378+15j
		mov	edx, 0		; protocol
		mov	esi, 1		; type
		mov	edi, 2		; domain
		call	_socket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_33D0
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038
		jmp	short loc_33EA
; ---------------------------------------------------------------------------

loc_33D0:				; CODE XREF: sub_3378+42j
		mov	esi, eax
		mov	rdi, rbx
		call	sub_316A
		movzx	edx, ax
		mov	esi, 0
		mov	rdi, rbp
		call	sub_2038

loc_33EA:				; CODE XREF: sub_3378+29j sub_3378+56j
		add	rsp, 8
		pop	rbx
		pop	rbp
		retn
sub_3378	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_33F2	proc near		; CODE XREF: sub_341E+28p
		movzx	ecx, byte ptr [rdi+28h]
		test	ecx, ecx
		jz	short loc_3418
		mov	edx, 0
		mov	eax, 0

loc_3404:				; CODE XREF: sub_33F2+22j
		cmp	qword ptr [rdi+rdx*8+8], 1
		sbb	ax, 0FFFFh
		add	rdx, 1
		cmp	ecx, edx
		ja	short loc_3404
		rep retn
; ---------------------------------------------------------------------------

loc_3418:				; CODE XREF: sub_33F2+6j
		mov	eax, 0
		retn
sub_33F2	endp


; =============== S U B	R O U T	I N E =======================================


sub_341E	proc near		; CODE XREF: sub_3540+ADp

var_B8		= byte ptr -0B8h
var_30		= qword	ptr -30h

		push	r14
		push	r13
		push	r12
		push	rbp
		push	rbx
		sub	rsp, 90h
		mov	r14, rdi
		mov	r12, rsi
		mov	rax, fs:28h
		mov	[rsp+0B8h+var_30], rax
		xor	eax, eax
		call	sub_33F2
		cmp	ax, 3
		jbe	short loc_3468
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	loc_3518
; ---------------------------------------------------------------------------

loc_3468:				; CODE XREF: sub_341E+31j
		mov	esi, 1
		mov	rdi, r12
		call	sub_2028
		mov	r13d, eax
		mov	esi, 2
		mov	rdi, r12
		call	sub_2028
		mov	rbp, rsp
		mov	ebx, 0
		cmp	ax, 5
		jz	short loc_34A7
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	short loc_3518
; ---------------------------------------------------------------------------

loc_34A7:				; CODE XREF: sub_341E+73j sub_341E+AFj
		lea	esi, [r13+rbx+0]
		movzx	esi, si
		mov	rdi, [r12+110h]
		call	sub_1C76
		test	al, al
		jz	short loc_34CF
		mov	[rbp+0], al
		add	ebx, 1
		add	rbp, 1
		cmp	ebx, 7Fh
		jnz	short loc_34A7

loc_34CF:				; CODE XREF: sub_341E+A0j
		mov	ebx, ebx
		mov	[rsp+rbx+0B8h+var_B8], 0
		mov	rdi, rsp	; filename
		lea	rsi, aR		; "r"
		call	_fopen
		test	rax, rax
		jnz	short loc_34FD
		mov	edx, 0FFFFh
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038
		jmp	short loc_3518
; ---------------------------------------------------------------------------

loc_34FD:				; CODE XREF: sub_341E+C9j
		mov	rsi, rax
		mov	rdi, r14
		call	sub_31CA
		movzx	edx, ax
		mov	esi, 0
		mov	rdi, r12
		call	sub_2038

loc_3518:				; CODE XREF: sub_341E+45j sub_341E+87j ...
		mov	rax, [rsp+0B8h+var_30]
		xor	rax, fs:28h
		jz	short loc_3530
		call	___stack_chk_fail
; ---------------------------------------------------------------------------

loc_3530:				; CODE XREF: sub_341E+10Bj
		add	rsp, 90h
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		retn
sub_341E	endp


; =============== S U B	R O U T	I N E =======================================


sub_3540	proc near		; CODE XREF: sub_2748+25p
		push	rbx
		mov	rbx, rsi
		test	rsi, rsi
		jnz	short loc_355F
		lea	rdi, aMissingCpu ; "Missing CPU!"
		call	_puts
		mov	edi, 0FFFFFFFFh	; status
		call	_exit
; ---------------------------------------------------------------------------

loc_355F:				; CODE XREF: sub_3540+7j
		cmp	byte ptr [rdi],	0
		jz	short loc_3576
		mov	esi, 6
		mov	rdi, rbx
		call	sub_1F20
		jmp	loc_3666
; ---------------------------------------------------------------------------

loc_3576:				; CODE XREF: sub_3540+22j
		cmp	dx, 0F9Fh
		ja	short loc_358F
		mov	esi, 5
		mov	rdi, rbx
		call	sub_1F20
		jmp	loc_3666
; ---------------------------------------------------------------------------

loc_358F:				; CODE XREF: sub_3540+3Bj
		movzx	edx, dx
		sub	edx, 0FA0h
		cmp	edx, 0Bh
		ja	loc_3659
		mov	edx, edx
		lea	rax, unk_3B88
		movsxd	rdx, dword ptr [rax+rdx*4]
		add	rax, rdx
		jmp	rax
; ---------------------------------------------------------------------------
		mov	edi, 0		; timer
		call	_time
		sar	rax, 10h
		movzx	edx, ax
		mov	esi, 0
		mov	rdi, rbx
		call	sub_2038
		mov	edi, 0		; timer
		call	_time
		movzx	edx, ax
		mov	esi, 1
		mov	rdi, rbx
		call	sub_2038
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_341E
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_32E2
		nop	dword ptr [rax+00000000h]
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_2B9E
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		align 10h
		call	sub_3378
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_2CA2
		nop	dword ptr [rax+00h]
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_2D9E
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		align 10h
		call	sub_3254
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_2E94
; ---------------------------------------------------------------------------
		align 20h
		call	sub_2EAE
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_2FAE
		nop	dword ptr [rax+00h]
		jmp	short loc_3666
; ---------------------------------------------------------------------------
		call	sub_30A4
		jmp	short loc_3666
; ---------------------------------------------------------------------------

loc_3659:				; CODE XREF: sub_3540+5Bj
		mov	esi, 5
		mov	rdi, rbx
		call	sub_1F20

loc_3666:				; CODE XREF: sub_3540+31j sub_3540+4Aj ...
		pop	rbx
		retn
sub_3540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_3670	proc near		; DATA XREF: start+16o
		push	r15
		mov	r15d, edi
		push	r14
		mov	r14, rsi
		push	r13
		mov	r13, rdx
		push	r12
		lea	r12, off_204DC0
		push	rbp
		lea	rbp, off_204DC8
		push	rbx
		sub	rbp, r12
		xor	ebx, ebx
		sar	rbp, 3
		sub	rsp, 8
		call	_init_proc
		test	rbp, rbp
		jz	short loc_36C6
		nop	dword ptr [rax+rax+00000000h]

loc_36B0:				; CODE XREF: sub_3670+54j
		mov	rdx, r13
		mov	rsi, r14
		mov	edi, r15d
		call	qword ptr [r12+rbx*8]
		add	rbx, 1
		cmp	rbx, rbp
		jnz	short loc_36B0

loc_36C6:				; CODE XREF: sub_3670+36j
		add	rsp, 8
		pop	rbx
		pop	rbp
		pop	r12
		pop	r13
		pop	r14
		pop	r15
		retn
sub_3670	endp

; ---------------------------------------------------------------------------
		align 20h
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD CTRL-"+" TO EXPAND]
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_fini		segment	dword public 'CODE' use64
		assume cs:_fini
		;org 36E4h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


		public _term_proc
_term_proc	proc near
		sub	rsp, 8
		add	rsp, 8
		retn
_term_proc	endp

_fini		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rodata		segment	para public 'CONST' use64
		assume cs:_rodata
		;org 36F0h
		db    1
		db    0
		db    2
		db    0
; char aTimeoutConnect[]
aTimeoutConnect	db 'Timeout! Connection closing.',0 ; DATA XREF: handler+4o
; char modes[]
modes		db 'rb',0               ; DATA XREF: sub_135F+5o
					; sub_18BC:loc_1A8Eo
; char filename[]
filename	db '/dev/urandom',0     ; DATA XREF: sub_135F+Co
; char s[]
s		db 'Recv error.',0      ; DATA XREF: sub_13DA+36o
; char delim[]
delim		db ' ',9,0              ; DATA XREF: sub_146E+22o sub_15D1+1Eo ...
; char aUsageRbAddress[]
aUsageRbAddress	db 'Usage: rb <address> <count>',0 ; DATA XREF: sub_146E+4Do
; char aMaxOf40BytesTo[]
aMaxOf40BytesTo	db 'Max of 40 bytes to read.',0 ; DATA XREF: sub_146E+91o
a02x		db '%02X ',0            ; DATA XREF: sub_146E+113o
a04x		db '%04X: ',0           ; DATA XREF: sub_146E+E1o sub_168E+E1o ...
; char aUsageWbAddress[]
aUsageWbAddress	db 'Usage: wb <address> <value>',0 ; DATA XREF: sub_15D1+49o
; char aUsageRwAddress[]
aUsageRwAddress	db 'Usage: rw <address> <count>',0 ; DATA XREF: sub_168E+4Do
; char aMaxOf40WordsTo[]
aMaxOf40WordsTo	db 'Max of 40 words to read.',0 ; DATA XREF: sub_168E+91o
a04x_0		db '%04X ',0            ; DATA XREF: sub_168E+113o
; char aUsageWwAddress[]
aUsageWwAddress	db 'Usage: ww <address> <value>',0 ; DATA XREF: sub_17F1+49o
; char aShitcpuSimulat[]
aShitcpuSimulat	db 'ShitCPU Simulator 1.0',0 ; DATA XREF: sub_18BC+A1o
; char s2[]
s2		db 'quit',0             ; DATA XREF: sub_18BC:loc_1A31o
; char aHelp[]
aHelp		db 'help',0             ; DATA XREF: sub_18BC+18Co
; char aRegisters[]
aRegisters	db 'registers',0        ; DATA XREF: sub_18BC:loc_1A6Co
; char aWb[]
aWb		db 'wb',0               ; DATA XREF: sub_18BC:loc_1AB3o
; char aRw[]
aRw		db 'rw',0               ; DATA XREF: sub_18BC:loc_1AD8o
; char aWw[]
aWw		db 'ww',0               ; DATA XREF: sub_18BC:loc_1AFDo
; char aRun[]
aRun		db 'run',0              ; DATA XREF: sub_18BC:loc_1B1Fo
; char aResettingCpuAn[]
aResettingCpuAn	db 'Resetting CPU and running.',0 ; DATA XREF: sub_18BC+276o
; char a_UnknownComman[]
a?UnknownComman	db '? Unknown command.',0 ; DATA XREF: sub_18BC:loc_1B55o
; char aSimulationEnde[]
aSimulationEnde	db 'Simulation ended.',0 ; DATA XREF: sub_18BC+2EAo
		align 20h
aReadingDBytesA	db 'Reading %d bytes at address 0x%04X:',0Ah,0 ; DATA XREF: sub_146E+BFo
		align 8
aByte0x02xWritt	db 'Byte 0x%02X written to address 0x%04X',0Ah,0 ; DATA XREF: sub_15D1+9Co
		align 10h
aReadingDWordsA	db 'Reading %d words at address 0x%04X:',0Ah,0 ; DATA XREF: sub_168E+BFo
		align 8
aWord0x04xWritt	db 'Word 0x%04X written to address 0x%04X',0Ah,0 ; DATA XREF: sub_17F1+AAo
		align 20h
; char aAvailableComma[]
aAvailableComma	db 'Available commands: run, registers, exit, rb, wb, rw, ww',0
					; DATA XREF: sub_18BC+ADo
					; sub_18BC+19Fo
aRD		db 'R%d',0              ; DATA XREF: sub_1DBE+52o
					; sub_1DBE+100o
a3s0x04x	db ' %-3s = 0x%04X',0   ; DATA XREF: sub_1DBE+85o
					; sub_1DBE+133o
aPc0x04x	db ' PC = 0x%04X',0Ah,0 ; DATA XREF: sub_1DBE+B3o
aRegisterWindow	db ' Register Window Pos = %d',0Ah,0 ; DATA XREF: sub_1DBE+D2o
; char aUnknownExcepti[]
aUnknownExcepti	db 'Unknown exception.',0 ; DATA XREF: sub_1F20:loc_1F9Co
; char aExceptionEncou[]
aExceptionEncou	db 0Ah			; DATA XREF: sub_1F20+9o
		db 0Ah
		db 'Exception encountered. Dumping registers:',0
		align 8
; char aSimulationEndi[]
aSimulationEndi	db 'Simulation ending. Max instructions reached.',0
					; DATA XREF: sub_1F20+36o
		align 8
; char aSimulationEn_0[]
aSimulationEn_0	db 'Simulation ending. Memory out of bounds access.',0
					; DATA XREF: sub_1F20+44o
; char aSimulationEn_1[]
aSimulationEn_1	db 'Simulation ending. Out of registers.',0 ; DATA XREF: sub_1F20+52o
		align 20h
; char aSimulationEn_2[]
aSimulationEn_2	db 'Simulation ending. Register underflow.',0 ; DATA XREF: sub_1F20+60o
		align 8
; char aSimulationEn_3[]
aSimulationEn_3	db 'Simulation ending. Syscall attempted while CPU syscalls are locke'
					; DATA XREF: sub_1F20+6Eo
		db 'd.',0
unk_3AAC	db 0F0h	; ð		; DATA XREF: sub_1F20+26o
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0B8h	; ¸
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0C6h	; Æ
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0D4h	; Ô
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0E2h	; â
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0AAh	; ª
		db 0E4h	; ä
		db 0FFh
		db 0FFh
unk_3AD8	db 0AAh	; ª		; DATA XREF: sub_2862+10o
		db 0EDh	; í
		db 0FFh
		db 0FFh
		db 0CDh	; Í
		db 0EDh	; í
		db 0FFh
		db 0FFh
		db 0F2h	; ò
		db 0EDh	; í
		db 0FFh
		db 0FFh
		db  12h
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db  32h	; 2
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db  52h	; R
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db  72h	; r
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db  92h	; ’
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0A2h	; ¢
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0B2h	; ²
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0C2h	; Â
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0D2h	; Ò
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0E2h	; â
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0F2h	; ò
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db    2
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  12h
		db 0EFh	; ï
		db 0FFh
		db 0FFh
unk_3B18	db 0F5h	; õ		; DATA XREF: sub_2882+17Bo
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0FCh	; ü
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db  0Ah
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  11h
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  1Fh
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  2Ah	; *
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  31h	; 1
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  3Fh	; ?
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  4Ah	; J
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  51h	; Q
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  5Fh	; _
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db    0
		db    0
		db    0
		db    0
; char aExitSyscallRec[]
aExitSyscallRec	db 'Exit syscall received. Simulation ending.',0 ; DATA XREF: sub_2E94+4o
		align 8
; char aR[]
aR		db 'r',0                ; DATA XREF: sub_341E+BAo
; char aMissingCpu[]
aMissingCpu	db 'Missing CPU!',0     ; DATA XREF: sub_3540+9o
		align 8
unk_3B88	db  2Bh	; +		; DATA XREF: sub_3540+63o
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  65h	; e
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  6Ch	; l
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  7Ah	; z
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  81h	; 
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  8Fh	; 
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  9Ah	; š
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db 0A1h	; ¡
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db 0AFh	; ¯
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db 0B4h	; ´
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db 0BFh	; ¿
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db 0CAh	; Ê
		db 0FAh	; ú
		db 0FFh
		db 0FFh
_rodata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_frame_hdr	segment	dword public 'CONST' use64
		assume cs:_eh_frame_hdr
		;org 3BB8h
		db    1
		db  1Bh
		db    3
		db  3Bh	; ;
		db    4
		db    3
		db    0
		db    0
		db  5Fh	; _
		db    0
		db    0
		db    0
		db 0E8h	; è
		db 0D3h	; Ó
		db 0FFh
		db 0FFh
		db  50h	; P
		db    3
		db    0
		db    0
		db  78h	; x
		db 0D6h	; Ö
		db 0FFh
		db 0FFh
		db  20h
		db    3
		db    0
		db    0
		db  8Dh	; 
		db 0D7h	; ×
		db 0FFh
		db 0FFh
		db  78h	; x
		db    3
		db    0
		db    0
		db 0A7h	; §
		db 0D7h	; ×
		db 0FFh
		db 0FFh
		db  90h	; 
		db    3
		db    0
		db    0
		db  22h	; "
		db 0D8h	; Ø
		db 0FFh
		db 0FFh
		db 0B0h	; °
		db    3
		db    0
		db    0
		db  7Dh	; }
		db 0D8h	; Ø
		db 0FFh
		db 0FFh
		db 0E0h	; à
		db    3
		db    0
		db    0
		db  99h	; ™
		db 0D8h	; Ø
		db 0FFh
		db 0FFh
		db 0F8h	; ø
		db    3
		db    0
		db    0
		db 0B6h	; ¶
		db 0D8h	; Ø
		db 0FFh
		db 0FFh
		db  10h
		db    4
		db    0
		db    0
		db  19h
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  60h	; `
		db    4
		db    0
		db    0
		db 0D6h	; Ö
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  98h	; ˜
		db    4
		db    0
		db    0
		db  39h	; 9
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db 0E8h	; è
		db    4
		db    0
		db    0
		db    4
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  40h	; @
		db    5
		db    0
		db    0
		db  7Ch	; |
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db  90h	; 
		db    5
		db    0
		db    0
		db 0A6h	; ¦
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db 0B0h	; °
		db    5
		db    0
		db    0
		db 0BEh	; ¾
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db 0C8h	; È
		db    5
		db    0
		db    0
		db 0CAh	; Ê
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db 0E0h	; à
		db    5
		db    0
		db    0
		db 0FAh	; ú
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db    0
		db    6
		db    0
		db    0
		db    6
		db 0E1h	; á
		db 0FFh
		db 0FFh
		db  18h
		db    6
		db    0
		db    0
		db  30h	; 0
		db 0E1h	; á
		db 0FFh
		db 0FFh
		db  38h	; 8
		db    6
		db    0
		db    0
		db  78h	; x
		db 0E1h	; á
		db 0FFh
		db 0FFh
		db  50h	; P
		db    6
		db    0
		db    0
		db 0C2h	; Â
		db 0E1h	; á
		db 0FFh
		db 0FFh
		db  68h	; h
		db    6
		db    0
		db    0
		db 0C4h	; Ä
		db 0E1h	; á
		db 0FFh
		db 0FFh
		db  80h	; €
		db    6
		db    0
		db    0
		db    6
		db 0E2h	; â
		db 0FFh
		db 0FFh
		db 0B0h	; °
		db    6
		db    0
		db    0
		db  68h	; h
		db 0E3h	; ã
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db    6
		db    0
		db    0
		db 0FAh	; ú
		db 0E3h	; ã
		db 0FFh
		db 0FFh
		db  10h
		db    7
		db    0
		db    0
		db  10h
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db  28h	; (
		db    7
		db    0
		db    0
		db  28h	; (
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db  40h	; @
		db    7
		db    0
		db    0
		db  44h	; D
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db  58h	; X
		db    7
		db    0
		db    0
		db  4Ah	; J
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db  70h	; p
		db    7
		db    0
		db    0
		db  54h	; T
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db  88h	; ˆ
		db    7
		db    0
		db    0
		db  5Eh	; ^
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0A0h	;  
		db    7
		db    0
		db    0
		db  68h	; h
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0B8h	; ¸
		db    7
		db    0
		db    0
		db  70h	; p
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0D0h	; Ð
		db    7
		db    0
		db    0
		db  80h	; €
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0E8h	; è
		db    7
		db    0
		db    0
		db  90h	; 
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db    0
		db    8
		db    0
		db    0
		db 0C8h	; È
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db  18h
		db    8
		db    0
		db    0
		db    0
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db  30h	; 0
		db    8
		db    0
		db    0
		db  38h	; 8
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db  48h	; H
		db    8
		db    0
		db    0
		db  70h	; p
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db  60h	; `
		db    8
		db    0
		db    0
		db 0C0h	; À
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db  78h	; x
		db    8
		db    0
		db    0
		db 0F8h	; ø
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db  90h	; 
		db    8
		db    0
		db    0
		db  30h	; 0
		db 0E6h	; æ
		db 0FFh
		db 0FFh
		db 0A8h	; ¨
		db    8
		db    0
		db    0
		db  58h	; X
		db 0E6h	; æ
		db 0FFh
		db 0FFh
		db 0C0h	; À
		db    8
		db    0
		db    0
		db  7Eh	; ~
		db 0E6h	; æ
		db 0FFh
		db 0FFh
		db 0D8h	; Ø
		db    8
		db    0
		db    0
		db 0BEh	; ¾
		db 0E6h	; æ
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db    8
		db    0
		db    0
		db 0FEh	; þ
		db 0E6h	; æ
		db 0FFh
		db 0FFh
		db    8
		db    9
		db    0
		db    0
		db  24h	; $
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  20h
		db    9
		db    0
		db    0
		db  4Ah	; J
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  38h	; 8
		db    9
		db    0
		db    0
		db  70h	; p
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  50h	; P
		db    9
		db    0
		db    0
		db  96h	; –
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  68h	; h
		db    9
		db    0
		db    0
		db 0B8h	; ¸
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  80h	; €
		db    9
		db    0
		db    0
		db 0DAh	; Ú
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  98h	; ˜
		db    9
		db    0
		db    0
		db 0FCh	; ü
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db 0B0h	; °
		db    9
		db    0
		db    0
		db  1Eh
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db 0C8h	; È
		db    9
		db    0
		db    0
		db  2Ch	; ,
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db 0E0h	; à
		db    9
		db    0
		db    0
		db  3Ah	; :
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db 0F8h	; ø
		db    9
		db    0
		db    0
		db  60h	; `
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  10h
		db  0Ah
		db    0
		db    0
		db  7Ah	; z
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  28h	; (
		db  0Ah
		db    0
		db    0
		db 0C4h	; Ä
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  50h	; P
		db  0Ah
		db    0
		db    0
		db    2
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db  68h	; h
		db  0Ah
		db    0
		db    0
		db  4Ah	; J
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db  90h	; 
		db  0Ah
		db    0
		db    0
		db  88h	; ˆ
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db 0A8h	; ¨
		db  0Ah
		db    0
		db    0
		db 0F4h	; ô
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db 0D8h	; Ø
		db  0Ah
		db    0
		db    0
		db  60h	; `
		db 0EAh	; ê
		db 0FFh
		db 0FFh
		db    8
		db  0Bh
		db    0
		db    0
		db 0CAh	; Ê
		db 0EAh	; ê
		db 0FFh
		db 0FFh
		db  20h
		db  0Bh
		db    0
		db    0
		db  44h	; D
		db 0EBh	; ë
		db 0FFh
		db 0FFh
		db  38h	; 8
		db  0Bh
		db    0
		db    0
		db  90h	; 
		db 0EBh	; ë
		db 0FFh
		db 0FFh
		db  50h	; P
		db  0Bh
		db    0
		db    0
		db 0C0h	; À
		db 0EBh	; ë
		db 0FFh
		db 0FFh
		db  68h	; h
		db  0Bh
		db    0
		db    0
		db  16h
		db 0ECh	; ì
		db 0FFh
		db 0FFh
		db  80h	; €
		db  0Bh
		db    0
		db    0
		db 0AAh	; ª
		db 0ECh	; ì
		db 0FFh
		db 0FFh
		db 0A0h	;  
		db  0Bh
		db    0
		db    0
		db 0DAh	; Ú
		db 0EEh	; î
		db 0FFh
		db 0FFh
		db 0C0h	; À
		db  0Bh
		db    0
		db    0
		db  38h	; 8
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db 0D8h	; Ø
		db  0Bh
		db    0
		db    0
		db  80h	; €
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db  0Bh
		db    0
		db    0
		db 0E6h	; æ
		db 0EFh	; ï
		db 0FFh
		db 0FFh
		db  20h
		db  0Ch
		db    0
		db    0
		db 0EAh	; ê
		db 0F0h	; ð
		db 0FFh
		db 0FFh
		db  68h	; h
		db  0Ch
		db    0
		db    0
		db 0E6h	; æ
		db 0F1h	; ñ
		db 0FFh
		db 0FFh
		db 0B0h	; °
		db  0Ch
		db    0
		db    0
		db 0DCh	; Ü
		db 0F2h	; ò
		db 0FFh
		db 0FFh
		db 0F8h	; ø
		db  0Ch
		db    0
		db    0
		db 0F6h	; ö
		db 0F2h	; ò
		db 0FFh
		db 0FFh
		db  10h
		db  0Dh
		db    0
		db    0
		db 0F6h	; ö
		db 0F3h	; ó
		db 0FFh
		db 0FFh
		db  50h	; P
		db  0Dh
		db    0
		db    0
		db 0ECh	; ì
		db 0F4h	; ô
		db 0FFh
		db 0FFh
		db  80h	; €
		db  0Dh
		db    0
		db    0
		db  82h	; ‚
		db 0F5h	; õ
		db 0FFh
		db 0FFh
		db 0A8h	; ¨
		db  0Dh
		db    0
		db    0
		db  9Ah	; š
		db 0F5h	; õ
		db 0FFh
		db 0FFh
		db 0C0h	; À
		db  0Dh
		db    0
		db    0
		db 0B2h	; ²
		db 0F5h	; õ
		db 0FFh
		db 0FFh
		db 0D8h	; Ø
		db  0Dh
		db    0
		db    0
		db  12h
		db 0F6h	; ö
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db  0Dh
		db    0
		db    0
		db  74h	; t
		db 0F6h	; ö
		db 0FFh
		db 0FFh
		db    8
		db  0Eh
		db    0
		db    0
		db  9Ch	; œ
		db 0F6h	; ö
		db 0FFh
		db 0FFh
		db  28h	; (
		db  0Eh
		db    0
		db    0
		db    0
		db 0F7h	; ÷
		db 0FFh
		db 0FFh
		db  50h	; P
		db  0Eh
		db    0
		db    0
		db  2Ah	; *
		db 0F7h	; ÷
		db 0FFh
		db 0FFh
		db  70h	; p
		db  0Eh
		db    0
		db    0
		db  90h	; 
		db 0F7h	; ÷
		db 0FFh
		db 0FFh
		db  98h	; ˜
		db  0Eh
		db    0
		db    0
		db 0C0h	; À
		db 0F7h	; ÷
		db 0FFh
		db 0FFh
		db 0B0h	; °
		db  0Eh
		db    0
		db    0
		db  3Ah	; :
		db 0F8h	; ø
		db 0FFh
		db 0FFh
		db 0D8h	; Ø
		db  0Eh
		db    0
		db    0
		db  66h	; f
		db 0F8h	; ø
		db 0FFh
		db 0FFh
		db 0F0h	; ð
		db  0Eh
		db    0
		db    0
		db  88h	; ˆ
		db 0F9h	; ù
		db 0FFh
		db 0FFh
		db  38h	; 8
		db  0Fh
		db    0
		db    0
		db 0B8h	; ¸
		db 0FAh	; ú
		db 0FFh
		db 0FFh
		db  58h	; X
		db  0Fh
		db    0
		db    0
		db  28h	; (
		db 0FBh	; û
		db 0FFh
		db 0FFh
		db 0A0h	;  
		db  0Fh
		db    0
		db    0
_eh_frame_hdr	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame	segment	para public 'CONST' use64
		assume cs:_eh_frame
		;org 3EC0h
		db  14h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  7Ah	; z
		db  52h	; R
		db    0
		db    1
		db  78h	; x
		db  10h
		db    1
		db  1Bh
		db  0Ch
		db    7
		db    8
		db  90h	; 
		db    1
		db    7
		db  10h
		db  14h
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db  50h	; P
		db 0D3h	; Ó
		db 0FFh
		db 0FFh
		db  2Ah	; *
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  7Ah	; z
		db  52h	; R
		db    0
		db    1
		db  78h	; x
		db  10h
		db    1
		db  1Bh
		db  0Ch
		db    7
		db    8
		db  90h	; 
		db    1
		db    0
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db  90h	; 
		db 0D0h	; Ð
		db 0FFh
		db 0FFh
		db  90h	; 
		db    2
		db    0
		db    0
		db    0
		db  0Eh
		db  10h
		db  46h	; F
		db  0Eh
		db  18h
		db  4Ah	; J
		db  0Fh
		db  0Bh
		db  77h	; w
		db    8
		db  80h	; €
		db    0
		db  3Fh	; ?
		db  1Ah
		db  3Bh	; ;
		db  2Ah	; *
		db  33h	; 3
		db  24h	; $
		db  22h	; "
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  44h	; D
		db    0
		db    0
		db    0
		db  0Dh
		db 0D4h	; Ô
		db 0FFh
		db 0FFh
		db  1Ah
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  10h
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    0
		db    0
		db    0
		db  0Fh
		db 0D4h	; Ô
		db 0FFh
		db 0FFh
		db  7Bh	; {
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db  44h	; D
		db  0Eh
		db  20h
		db    2
		db  74h	; t
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db  7Ch	; |
		db    0
		db    0
		db    0
		db  6Ah	; j
		db 0D4h	; Ô
		db 0FFh
		db 0FFh
		db  5Bh	; [
		db    0
		db    0
		db    0
		db    0
		db  46h	; F
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db    2
		db  4Eh	; N
		db 0C3h	; Ã
		db  0Eh
		db  18h
		db  41h	; A
		db 0C6h	; Æ
		db  0Eh
		db  10h
		db  42h	; B
		db 0CCh	; Ì
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0ACh	; ¬
		db    0
		db    0
		db    0
		db  95h	; •
		db 0D4h	; Ô
		db 0FFh
		db 0FFh
		db  1Ch
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  20h
		db  57h	; W
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0C4h	; Ä
		db    0
		db    0
		db    0
		db  99h	; ™
		db 0D4h	; Ô
		db 0FFh
		db 0FFh
		db  1Dh
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  20h
		db  58h	; X
		db  0Eh
		db    8
		db    0
		db  4Ch	; L
		db    0
		db    0
		db    0
		db 0DCh	; Ü
		db    0
		db    0
		db    0
		db  9Eh	; ž
		db 0D4h	; Ô
		db 0FFh
		db 0FFh
		db  63h	; c
		db    1
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  42h	; B
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  41h	; A
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  44h	; D
		db  0Eh
		db  70h	; p
		db    3
		db  4Ah	; J
		db    1
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  34h	; 4
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    1
		db    0
		db    0
		db 0B1h	; ±
		db 0D5h	; Õ
		db 0FFh
		db 0FFh
		db 0BDh	; ½
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Dh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Ch	; Œ
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  86h	; †
		db    4
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  83h	; ƒ
		db    5
		db  44h	; D
		db  0Eh
		db  60h	; `
		db    2
		db 0ACh	; ¬
		db  0Eh
		db  28h	; (
		db  41h	; A
		db  0Eh
		db  20h
		db  41h	; A
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  4Ch	; L
		db    0
		db    0
		db    0
		db  64h	; d
		db    1
		db    0
		db    0
		db  36h	; 6
		db 0D6h	; Ö
		db 0FFh
		db 0FFh
		db  63h	; c
		db    1
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  42h	; B
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  41h	; A
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  44h	; D
		db  0Eh
		db  70h	; p
		db    3
		db  4Ah	; J
		db    1
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  34h	; 4
		db    0
		db    0
		db    0
		db 0B4h	; ´
		db    1
		db    0
		db    0
		db  49h	; I
		db 0D7h	; ×
		db 0FFh
		db 0FFh
		db 0CBh	; Ë
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Dh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Ch	; Œ
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  86h	; †
		db    4
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  83h	; ƒ
		db    5
		db  44h	; D
		db  0Eh
		db  60h	; `
		db    2
		db 0BAh	; º
		db  0Eh
		db  28h	; (
		db  41h	; A
		db  0Eh
		db  20h
		db  41h	; A
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  1Ch
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  7Ah	; z
		db  50h	; P
		db  4Ch	; L
		db  52h	; R
		db    0
		db    1
		db  78h	; x
		db  10h
		db    7
		db  9Bh	; ›
		db  7Dh	; }
		db  10h
		db  20h
		db    0
		db  1Bh
		db  1Bh
		db  0Ch
		db    7
		db    8
		db  90h	; 
		db    1
		db    0
		db    0
		db  4Ch	; L
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db 0BCh	; ¼
		db 0D7h	; ×
		db 0FFh
		db 0FFh
		db  78h	; x
		db    3
		db    0
		db    0
		db    4
		db  6Bh	; k
		db  0Ah
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  42h	; B
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  41h	; A
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  47h	; G
		db  0Eh
		db 0E0h	; à
		db  0Bh
		db    3
		db  5Ch	; \
		db    3
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    2
		db    0
		db    0
		db 0E4h	; ä
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  29h	; )
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db  67h	; g
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  7Ch	; |
		db    2
		db    0
		db    0
		db 0EEh	; î
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  18h
		db    0
		db    0
		db    0
		db    0
		db  4Dh	; M
		db  0Eh
		db  10h
		db  49h	; I
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  94h	; ”
		db    2
		db    0
		db    0
		db 0EEh	; î
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  0Ch
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db 0ACh	; ¬
		db    2
		db    0
		db    0
		db 0E2h	; â
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  2Fh	; /
		db    0
		db    0
		db    0
		db    0
		db  4Ah	; J
		db  0Eh
		db  10h
		db  54h	; T
		db  0Eh
		db    8
		db  4Ch	; L
		db  0Eh
		db  10h
		db  44h	; D
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0CCh	; Ì
		db    2
		db    0
		db    0
		db 0F2h	; ò
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  0Bh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db 0E4h	; ä
		db    2
		db    0
		db    0
		db 0E6h	; æ
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  2Ah	; *
		db    0
		db    0
		db    0
		db    0
		db  4Ah	; J
		db  0Eh
		db  10h
		db  4Fh	; O
		db  0Eh
		db    8
		db  4Ch	; L
		db  0Eh
		db  10h
		db  44h	; D
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db    4
		db    3
		db    0
		db    0
		db 0F0h	; ð
		db 0DAh	; Ú
		db 0FFh
		db 0FFh
		db  3Fh	; ?
		db    0
		db    0
		db    0
		db    0
		db  5Eh	; ^
		db  0Eh
		db  10h
		db  5Fh	; _
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  1Ch
		db    3
		db    0
		db    0
		db  20h
		db 0DBh	; Û
		db 0FFh
		db 0FFh
		db  4Ah	; J
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  34h	; 4
		db    3
		db    0
		db    0
		db  52h	; R
		db 0DBh	; Û
		db 0FFh
		db 0FFh
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db  4Ch	; L
		db    3
		db    0
		db    0
		db  3Ch	; <
		db 0DBh	; Û
		db 0FFh
		db 0FFh
		db  42h	; B
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db  7Ah	; z
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  3Ch	; <
		db    0
		db    0
		db    0
		db  7Ch	; |
		db    3
		db    0
		db    0
		db  4Eh	; N
		db 0DBh	; Û
		db 0FFh
		db 0FFh
		db  61h	; a
		db    1
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Dh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Ch	; Œ
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  86h	; †
		db    4
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  83h	; ƒ
		db    5
		db  47h	; G
		db  0Eh
		db 0C0h	; À
		db    1
		db    3
		db  4Dh	; M
		db    1
		db  0Eh
		db  28h	; (
		db  41h	; A
		db  0Eh
		db  20h
		db  41h	; A
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db 0BCh	; ¼
		db    3
		db    0
		db    0
		db  70h	; p
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  92h	; ’
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db  14h
		db    0
		db    0
		db    0
		db 0DCh	; Ü
		db    3
		db    0
		db    0
		db 0E2h	; â
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  15h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0F4h	; ô
		db    3
		db    0
		db    0
		db 0E0h	; à
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  17h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  0Ch
		db    4
		db    0
		db    0
		db 0E0h	; à
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  1Bh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  24h	; $
		db    4
		db    0
		db    0
		db 0E4h	; ä
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db    6
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  3Ch	; <
		db    4
		db    0
		db    0
		db 0D2h	; Ò
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db    9
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  54h	; T
		db    4
		db    0
		db    0
		db 0C4h	; Ä
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  0Ah
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  6Ch	; l
		db    4
		db    0
		db    0
		db 0B6h	; ¶
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db    9
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  84h	; „
		db    4
		db    0
		db    0
		db 0A8h	; ¨
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db    7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  9Ch	; œ
		db    4
		db    0
		db    0
		db  98h	; ˜
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  0Fh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0B4h	; ´
		db    4
		db    0
		db    0
		db  90h	; 
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  0Fh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0CCh	; Ì
		db    4
		db    0
		db    0
		db  88h	; ˆ
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  37h	; 7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0E4h	; ä
		db    4
		db    0
		db    0
		db 0A8h	; ¨
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  37h	; 7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0FCh	; ü
		db    4
		db    0
		db    0
		db 0C8h	; È
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  37h	; 7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  14h
		db    5
		db    0
		db    0
		db 0E8h	; è
		db 0DCh	; Ü
		db 0FFh
		db 0FFh
		db  37h	; 7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    5
		db    0
		db    0
		db    8
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  50h	; P
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  44h	; D
		db    5
		db    0
		db    0
		db  40h	; @
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  37h	; 7
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    5
		db    0
		db    0
		db  60h	; `
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  38h	; 8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  74h	; t
		db    5
		db    0
		db    0
		db  80h	; €
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  27h	; '
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  8Ch	; Œ
		db    5
		db    0
		db    0
		db  90h	; 
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0A4h	; ¤
		db    5
		db    0
		db    0
		db  9Eh	; ž
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  3Fh	; ?
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0BCh	; ¼
		db    5
		db    0
		db    0
		db 0C6h	; Æ
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  3Fh	; ?
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0D4h	; Ô
		db    5
		db    0
		db    0
		db 0EEh	; î
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0ECh	; ì
		db    5
		db    0
		db    0
		db 0FCh	; ü
		db 0DDh	; Ý
		db 0FFh
		db 0FFh
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db    4
		db    6
		db    0
		db    0
		db  0Ah
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  1Ch
		db    6
		db    0
		db    0
		db  18h
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  34h	; 4
		db    6
		db    0
		db    0
		db  26h	; &
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  22h	; "
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  4Ch	; L
		db    6
		db    0
		db    0
		db  30h	; 0
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  22h	; "
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  64h	; d
		db    6
		db    0
		db    0
		db  3Ah	; :
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  22h	; "
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  7Ch	; |
		db    6
		db    0
		db    0
		db  44h	; D
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  22h	; "
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  94h	; ”
		db    6
		db    0
		db    0
		db  4Eh	; N
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  0Dh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0ACh	; ¬
		db    6
		db    0
		db    0
		db  44h	; D
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  0Dh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0C4h	; Ä
		db    6
		db    0
		db    0
		db  3Ah	; :
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0DCh	; Ü
		db    6
		db    0
		db    0
		db  48h	; H
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  1Ah
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db 0F4h	; ô
		db    6
		db    0
		db    0
		db  4Ah	; J
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  4Ah	; J
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; †
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  83h	; ƒ
		db    3
		db  44h	; D
		db  0Eh
		db  20h
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db  14h
		db    0
		db    0
		db    0
		db  1Ch
		db    7
		db    0
		db    0
		db  6Ch	; l
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  3Dh	; =
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  10h
		db  78h	; x
		db  0Eh
		db    8
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db  34h	; 4
		db    7
		db    0
		db    0
		db  92h	; ’
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  47h	; G
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; †
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  83h	; ƒ
		db    3
		db  44h	; D
		db  0Eh
		db  20h
		db  7Eh	; ~
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    7
		db    0
		db    0
		db 0B2h	; ²
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  3Dh	; =
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  10h
		db  78h	; x
		db  0Eh
		db    8
		db    0
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db  74h	; t
		db    7
		db    0
		db    0
		db 0D8h	; Ø
		db 0DEh	; Þ
		db 0FFh
		db 0FFh
		db  6Bh	; k
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db    2
		db  63h	; c
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db 0A4h	; ¤
		db    7
		db    0
		db    0
		db  14h
		db 0DFh	; ß
		db 0FFh
		db 0FFh
		db  6Bh	; k
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db    2
		db  63h	; c
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0D4h	; Ô
		db    7
		db    0
		db    0
		db  50h	; P
		db 0DFh	; ß
		db 0FFh
		db 0FFh
		db  69h	; i
		db    0
		db    0
		db    0
		db    0
		db  74h	; t
		db  0Eh
		db  10h
		db  4Ah	; J
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0ECh	; ì
		db    7
		db    0
		db    0
		db 0A2h	; ¢
		db 0DFh	; ß
		db 0FFh
		db 0FFh
		db  79h	; y
		db    0
		db    0
		db    0
		db    0
		db    2
		db  50h	; P
		db  0Eh
		db  10h
		db  4Ah	; J
		db  0Eh
		db    8
		db  14h
		db    0
		db    0
		db    0
		db    4
		db    8
		db    0
		db    0
		db    4
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db  4Ch	; L
		db    0
		db    0
		db    0
		db    0
		db  64h	; d
		db  0Eh
		db  10h
		db  4Ah	; J
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  1Ch
		db    8
		db    0
		db    0
		db  38h	; 8
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db  2Fh	; /
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  10h
		db  6Ah	; j
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  34h	; 4
		db    8
		db    0
		db    0
		db  50h	; P
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db  56h	; V
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db  4Ch	; L
		db    8
		db    0
		db    0
		db  8Eh	; Ž
		db 0E0h	; à
		db 0FFh
		db 0FFh
		db  93h	; “
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db    2
		db  91h	; ‘
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db  6Ch	; l
		db    8
		db    0
		db    0
		db    2
		db 0E1h	; á
		db 0FFh
		db 0FFh
		db  2Fh	; /
		db    2
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  10h
		db    3
		db  2Ah	; *
		db    2
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  8Ch	; Œ
		db    8
		db    0
		db    0
		db  12h
		db 0E3h	; ã
		db 0FFh
		db 0FFh
		db  5Bh	; [
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0A4h	; ¤
		db    8
		db    0
		db    0
		db  58h	; X
		db 0E3h	; ã
		db 0FFh
		db 0FFh
		db  48h	; H
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db 0BCh	; ¼
		db    8
		db    0
		db    0
		db  88h	; ˆ
		db 0E3h	; ã
		db 0FFh
		db 0FFh
		db  66h	; f
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db    2
		db  5Eh	; ^
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db    0
		db    0
		db    0
		db 0ECh	; ì
		db    8
		db    0
		db    0
		db 0BEh	; ¾
		db 0E3h	; ã
		db 0FFh
		db 0FFh
		db    3
		db    1
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  42h	; B
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  41h	; A
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  44h	; D
		db  0Eh
		db  60h	; `
		db    2
		db 0EAh	; ê
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  44h	; D
		db    0
		db    0
		db    0
		db  34h	; 4
		db    9
		db    0
		db    0
		db  7Ah	; z
		db 0E4h	; ä
		db 0FFh
		db 0FFh
		db 0FCh	; ü
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  42h	; B
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  41h	; A
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  44h	; D
		db  0Eh
		db  60h	; `
		db    2
		db 0E3h	; ã
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  44h	; D
		db    0
		db    0
		db    0
		db  7Ch	; |
		db    9
		db    0
		db    0
		db  2Eh	; .
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db 0F6h	; ö
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  42h	; B
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  41h	; A
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  44h	; D
		db  0Eh
		db  50h	; P
		db    2
		db 0DDh	; Ý
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  14h
		db    0
		db    0
		db    0
		db 0C4h	; Ä
		db    9
		db    0
		db    0
		db 0DCh	; Ü
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db  1Ah
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db  0Eh
		db  10h
		db    0
		db    0
		db    0
		db    0
		db  3Ch	; <
		db    0
		db    0
		db    0
		db 0DCh	; Ü
		db    9
		db    0
		db    0
		db 0DEh	; Þ
		db 0E5h	; å
		db 0FFh
		db 0FFh
		db 0FFh
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Eh	; Ž
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Dh	; 
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Ch	; Œ
		db    4
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  86h	; †
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  83h	; ƒ
		db    6
		db  44h	; D
		db  0Eh
		db  50h	; P
		db    2
		db 0EAh	; ê
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  41h	; A
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db  1Ch
		db  0Ah
		db    0
		db    0
		db  9Eh	; ž
		db 0E6h	; æ
		db 0FFh
		db 0FFh
		db 0F5h	; õ
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Ch	; Œ
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  86h	; †
		db    3
		db  41h	; A
		db  0Eh
		db  20h
		db  83h	; ƒ
		db    4
		db  44h	; D
		db  0Eh
		db  40h	; @
		db    2
		db 0E8h	; è
		db  0Eh
		db  20h
		db  41h	; A
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db  24h	; $
		db    0
		db    0
		db    0
		db  4Ch	; L
		db  0Ah
		db    0
		db    0
		db  64h	; d
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  95h	; •
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; †
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  83h	; ƒ
		db    3
		db  44h	; D
		db  0Eh
		db  20h
		db    2
		db  8Ch	; Œ
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db  14h
		db    0
		db    0
		db    0
		db  74h	; t
		db  0Ah
		db    0
		db    0
		db 0D2h	; Ò
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  17h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  8Ch	; Œ
		db  0Ah
		db    0
		db    0
		db 0D2h	; Ò
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  18h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0A4h	; ¤
		db  0Ah
		db    0
		db    0
		db 0D2h	; Ò
		db 0E7h	; ç
		db 0FFh
		db 0FFh
		db  5Fh	; _
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  14h
		db    0
		db    0
		db    0
		db 0BCh	; ¼
		db  0Ah
		db    0
		db    0
		db  1Ah
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  62h	; b
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db 0D4h	; Ô
		db  0Ah
		db    0
		db    0
		db  64h	; d
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  28h	; (
		db    0
		db    0
		db    0
		db    0
		db  4Ah	; J
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db  5Ch	; \
		db 0C3h	; Ã
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db 0F4h	; ô
		db  0Ah
		db    0
		db    0
		db  6Ch	; l
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  64h	; d
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; †
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  83h	; ƒ
		db    3
		db  44h	; D
		db  0Eh
		db  20h
		db    2
		db  5Bh	; [
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db  1Ch
		db    0
		db    0
		db    0
		db  1Ch
		db  0Bh
		db    0
		db    0
		db 0A8h	; ¨
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  2Ah	; *
		db    0
		db    0
		db    0
		db    0
		db  4Ah	; J
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db  5Eh	; ^
		db 0C3h	; Ã
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db  3Ch	; <
		db  0Bh
		db    0
		db    0
		db 0B2h	; ²
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  65h	; e
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; †
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  83h	; ƒ
		db    3
		db  44h	; D
		db  0Eh
		db  20h
		db    2
		db  5Ch	; \
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db  14h
		db    0
		db    0
		db    0
		db  64h	; d
		db  0Bh
		db    0
		db    0
		db 0F0h	; ð
		db 0E8h	; è
		db 0FFh
		db 0FFh
		db  2Fh	; /
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db  7Ch	; |
		db  0Bh
		db    0
		db    0
		db    8
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db  79h	; y
		db    0
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; †
		db    2
		db  41h	; A
		db  0Eh
		db  18h
		db  83h	; ƒ
		db    3
		db  44h	; D
		db  0Eh
		db  20h
		db    2
		db  70h	; p
		db  0Eh
		db  18h
		db  41h	; A
		db  0Eh
		db  10h
		db  41h	; A
		db  0Eh
		db    8
		db  14h
		db    0
		db    0
		db    0
		db 0A4h	; ¤
		db  0Bh
		db    0
		db    0
		db  5Ah	; Z
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db  2Ch	; ,
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db    0
		db    0
		db    0
		db 0BCh	; ¼
		db  0Bh
		db    0
		db    0
		db  6Eh	; n
		db 0E9h	; é
		db 0FFh
		db 0FFh
		db  22h	; "
		db    1
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Eh	; Ž
		db    2
		db  42h	; B
		db  0Eh
		db  18h
		db  8Dh	; 
		db    3
		db  42h	; B
		db  0Eh
		db  20h
		db  8Ch	; Œ
		db    4
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  86h	; †
		db    5
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  83h	; ƒ
		db    6
		db  47h	; G
		db  0Eh
		db 0C0h	; À
		db    1
		db    3
		db  0Ah
		db    1
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  41h	; A
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		db    4
		db  0Ch
		db    0
		db    0
		db  48h	; H
		db 0EAh	; ê
		db 0FFh
		db 0FFh
		db  28h	; (
		db    1
		db    0
		db    0
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  83h	; ƒ
		db    2
		db    3
		db  26h	; &
		db    1
		db  0Eh
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db  44h	; D
		db    0
		db    0
		db    0
		db  24h	; $
		db  0Ch
		db    0
		db    0
		db  58h	; X
		db 0EBh	; ë
		db 0FFh
		db 0FFh
		db  65h	; e
		db    0
		db    0
		db    0
		db    0
		db  42h	; B
		db  0Eh
		db  10h
		db  8Fh	; 
		db    2
		db  45h	; E
		db  0Eh
		db  18h
		db  8Eh	; Ž
		db    3
		db  45h	; E
		db  0Eh
		db  20h
		db  8Dh	; 
		db    4
		db  45h	; E
		db  0Eh
		db  28h	; (
		db  8Ch	; Œ
		db    5
		db  48h	; H
		db  0Eh
		db  30h	; 0
		db  86h	; †
		db    6
		db  48h	; H
		db  0Eh
		db  38h	; 8
		db  83h	; ƒ
		db    7
		db  4Dh	; M
		db  0Eh
		db  40h	; @
		db  6Ch	; l
		db  0Eh
		db  38h	; 8
		db  41h	; A
		db  0Eh
		db  30h	; 0
		db  41h	; A
		db  0Eh
		db  28h	; (
		db  42h	; B
		db  0Eh
		db  20h
		db  42h	; B
		db  0Eh
		db  18h
		db  42h	; B
		db  0Eh
		db  10h
		db  42h	; B
		db  0Eh
		db    8
		db    0
		db  14h
		db    0
		db    0
		db    0
		db  6Ch	; l
		db  0Ch
		db    0
		db    0
		db  80h	; €
		db 0EBh	; ë
		db 0FFh
		db 0FFh
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
_eh_frame	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_gcc_except_table segment byte public 'CONST' use64
		assume cs:_gcc_except_table
		;org 4B74h
		db 0FFh
		db 0FFh
		db    1
		db  2Bh	; +
		db  2Ch	; ,
		db    5
		db    0
		db    0
		db  39h	; 9
		db    5
		db 0CCh	; Ì
		db    6
		db    0
		db  43h	; C
		db    5
		db 0BDh	; ½
		db    6
		db    0
		db  81h	; 
		db    1
		db 0F5h	; õ
		db    4
		db 0AEh	; ®
		db    6
		db    0
		db 0FBh	; û
		db    5
		db    5
		db 0BDh	; ½
		db    6
		db    0
		db  85h	; …
		db    6
		db    5
		db 0CCh	; Ì
		db    6
		db    0
		db  8Fh	; 
		db    6
		db    5
		db    0
		db    0
		db 0DCh	; Ü
		db    6
		db    5
		db    0
		db    0
_gcc_except_table ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_init_array	segment	para public 'DATA' use64
		assume cs:_init_array
		;org 204DC0h
off_204DC0	dq offset sub_1310	; DATA XREF: sub_3670+11o
_init_array	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_fini_array	segment	para public 'DATA' use64
		assume cs:_fini_array
		;org 204DC8h
off_204DC8	dq offset sub_12D0	; DATA XREF: sub_3670+19o
_fini_array	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_jcr		segment	para public 'DATA' use64
		assume cs:_jcr
		;org 204DD0h
qword_204DD0	dq 0			; DATA XREF: sub_1310r	sub_1310+17o
_jcr		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got		segment	para public 'DATA' use64
		assume cs:_got
		;org 204FC8h
__gmon_start___ptr dq offset __gmon_start__ ; DATA XREF: _init_proc+4r
_Jv_RegisterClasses_ptr	dq offset _Jv_RegisterClasses ;	DATA XREF: sub_1310+Ar
_ITM_deregisterTMCloneTable_ptr	dq offset _ITM_deregisterTMCloneTable
					; DATA XREF: sub_1260:loc_127Dr
_ITM_registerTMCloneTable_ptr dq offset	_ITM_registerTMCloneTable
					; DATA XREF: sub_1310:loc_12BAr
__cxa_finalize_ptr dq offset __cxa_finalize ; DATA XREF: sub_12D0+9r
stdin_ptr	dq offset stdin		; DATA XREF: sub_13DA+13r sub_18BC+F6r
stdout_ptr	dq offset stdout	; DATA XREF: sub_18BC+72r
_got		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_got_plt	segment	para public 'DATA' use64
		assume cs:_got_plt
		;org 205000h
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
off_205018	dq offset memset	; DATA XREF: _memsetr
off_205020	dq offset __strncpy_chk	; DATA XREF: ___strncpy_chkr
off_205028	dq offset close		; DATA XREF: _closer
off_205030	dq offset __gmon_start__ ; DATA	XREF: ___gmon_start__r
off_205038	dq offset puts		; DATA XREF: _putsr
off_205040	dq offset _Znam		; DATA XREF: operator new[](ulong)r
					; operator new[](ulong)
off_205048	dq offset _ZdlPv	; DATA XREF: operator delete(void *)r
					; operator delete(void *)
off_205050	dq offset exit		; DATA XREF: _exitr
off_205058	dq offset __printf_chk	; DATA XREF: ___printf_chkr
off_205060	dq offset strcasecmp	; DATA XREF: _strcasecmpr
off_205068	dq offset setvbuf	; DATA XREF: _setvbufr
off_205070	dq offset putchar	; DATA XREF: _putcharr
off_205078	dq offset read		; DATA XREF: _readr
off_205080	dq offset fopen		; DATA XREF: _fopenr
off_205088	dq offset __libc_start_main ; DATA XREF: ___libc_start_mainr
off_205090	dq offset getpid	; DATA XREF: _getpidr
off_205098	dq offset _IO_getc	; DATA XREF: __IO_getcr
off_2050A0	dq offset listen	; DATA XREF: _listenr
off_2050A8	dq offset __cxa_finalize ; DATA	XREF: ___cxa_finalizer
off_2050B0	dq offset strtol	; DATA XREF: _strtolr
off_2050B8	dq offset connect	; DATA XREF: _connectr
off_2050C0	dq offset __strcpy_chk	; DATA XREF: ___strcpy_chkr
off_2050C8	dq offset signal	; DATA XREF: _signalr
off_2050D0	dq offset socket	; DATA XREF: _socketr
off_2050D8	dq offset fread		; DATA XREF: _freadr
off_2050E0	dq offset alarm		; DATA XREF: _alarmr
off_2050E8	dq offset __stack_chk_fail ; DATA XREF:	___stack_chk_failr
off_2050F0	dq offset srand		; DATA XREF: _srandr
off_2050F8	dq offset fclose	; DATA XREF: _fcloser
off_205100	dq offset __sprintf_chk	; DATA XREF: ___sprintf_chkr
off_205108	dq offset strcspn	; DATA XREF: _strcspnr
off_205110	dq offset strsep	; DATA XREF: _strsepr
off_205118	dq offset bind		; DATA XREF: _bindr
off_205120	dq offset rand		; DATA XREF: _randr
off_205128	dq offset __gxx_personality_v0 ; DATA XREF: .plt:___gxx_personality_v0r
off_205130	dq offset write		; DATA XREF: _writer
off_205138	dq offset _Unwind_Resume ; DATA	XREF: __Unwind_Resumer
off_205140	dq offset accept	; DATA XREF: _acceptr
off_205148	dq offset memcpy	; DATA XREF: _memcpyr
off_205150	dq offset time		; DATA XREF: _timer
_got_plt	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use64
		assume cs:_data
		;org 205158h
		align 20h
off_205160	dq offset off_205160	; DATA XREF: sub_12D0+17r
					; .data:off_205160o
		dq offset __gxx_personality_v0
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use64
		assume cs:_bss
		;org 205170h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		public _edata
_edata		db ?			; DATA XREF: sub_1260+7o
					; sub_1310:loc_1290o ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_205177	db    ?	;		; DATA XREF: sub_1260o
_bss		ends

; ===========================================================================

; Segment type:	Externs
; extern
; void *memset(void *s,	int c, size_t n)
		extrn memset:near	; DATA XREF: .got.plt:off_205018o
		extrn __strncpy_chk:near ; DATA	XREF: .got.plt:off_205020o
; int close(int	fd)
		extrn close:near	; DATA XREF: .got.plt:off_205028o
; int puts(const char *s)
		extrn puts:near		; DATA XREF: .got.plt:off_205038o
; operator new[](unsigned long)
		extrn _Znam:near	; DATA XREF: .got.plt:off_205040o
; void __cdecl operator	delete(void *)
		extrn _ZdlPv:near	; DATA XREF: .got.plt:off_205048o
; void exit(int	status)
		extrn exit:near		; DATA XREF: .got.plt:off_205050o
		extrn __printf_chk:near	; DATA XREF: .got.plt:off_205058o
; int strcasecmp(const char *s1, const char *s2)
		extrn strcasecmp:near	; DATA XREF: .got.plt:off_205060o
; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
		extrn setvbuf:near	; DATA XREF: .got.plt:off_205068o
; int putchar(int c)
		extrn putchar:near	; DATA XREF: .got.plt:off_205070o
; ssize_t read(int fd, void *buf, size_t nbytes)
		extrn read:near		; DATA XREF: .got.plt:off_205078o
; FILE *fopen(const char *filename, const char *modes)
		extrn fopen:near	; DATA XREF: .got.plt:off_205080o
		extrn __libc_start_main:near ; DATA XREF: .got.plt:off_205088o
; __pid_t getpid(void)
		extrn getpid:near	; DATA XREF: .got.plt:off_205090o
; int IO_getc(_IO_FILE *fp)
		extrn _IO_getc:near	; DATA XREF: .got.plt:off_205098o
; int listen(int fd, int n)
		extrn listen:near	; DATA XREF: .got.plt:off_2050A0o
		extrn __cxa_finalize:near ; weak ; DATA	XREF: .got:__cxa_finalize_ptro
					; .got.plt:off_2050A8o
; struct _IO_FILE *stdin
		extrn stdin		; DATA XREF: .got:stdin_ptro
; __int32 strtol(const char *nptr, char	**endptr, int base)
		extrn strtol:near	; DATA XREF: .got.plt:off_2050B0o
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
		extrn connect:near	; DATA XREF: .got.plt:off_2050B8o
		extrn __strcpy_chk:near	; DATA XREF: .got.plt:off_2050C0o
; __sighandler_t signal(int sig, __sighandler_t	handler)
		extrn signal:near	; DATA XREF: .got.plt:off_2050C8o
; int socket(int domain, int type, int protocol)
		extrn socket:near	; DATA XREF: .got.plt:off_2050D0o
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
		extrn fread:near	; DATA XREF: .got.plt:off_2050D8o
; unsigned int alarm(unsigned int seconds)
		extrn alarm:near	; DATA XREF: .got.plt:off_2050E0o
		extrn __stack_chk_fail:near ; DATA XREF: .got.plt:off_2050E8o
; void srand(unsigned int seed)
		extrn srand:near	; DATA XREF: .got.plt:off_2050F0o
; int fclose(FILE *stream)
		extrn fclose:near	; DATA XREF: .got.plt:off_2050F8o
		extrn __sprintf_chk:near ; DATA	XREF: .got.plt:off_205100o
; size_t strcspn(const char *s,	const char *reject)
		extrn strcspn:near	; DATA XREF: .got.plt:off_205108o
; char *strsep(char **stringp, const char *delim)
		extrn strsep:near	; DATA XREF: .got.plt:off_205110o
; int bind(int fd, const struct	sockaddr *addr,	socklen_t len)
		extrn bind:near		; DATA XREF: .got.plt:off_205118o
; int rand(void)
		extrn rand:near		; DATA XREF: .got.plt:off_205120o
		extrn __gxx_personality_v0:near	; DATA XREF: .got.plt:off_205128o
					; .data:0000000000205168o
; ssize_t write(int fd,	const void *buf, size_t	n)
		extrn write:near	; DATA XREF: .got.plt:off_205130o
		extrn _Unwind_Resume:near ; DATA XREF: .got.plt:off_205138o
; int accept(int fd, struct sockaddr *addr, socklen_t *addr_len)
		extrn accept:near	; DATA XREF: .got.plt:off_205140o
; void *memcpy(void *dest, const void *src, size_t n)
		extrn memcpy:near	; DATA XREF: .got.plt:off_205148o
; struct _IO_FILE *stdout
		extrn stdout		; DATA XREF: .got:stdout_ptro
; time_t time(time_t *timer)
		extrn time:near		; DATA XREF: .got.plt:off_205150o
		extrn __gmon_start__ ; weak ; DATA XREF: .got:__gmon_start___ptro
					; .got.plt:off_205030o
		extrn _Jv_RegisterClasses:near ; weak ;	CODE XREF: sub_1310+21p
					; DATA XREF: .got:_Jv_RegisterClasses_ptro
		extrn _ITM_deregisterTMCloneTable ; weak
					; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptro
		extrn _ITM_registerTMCloneTable	; weak
					; DATA XREF: .got:_ITM_registerTMCloneTable_ptro


		end start
